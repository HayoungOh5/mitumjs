{"code":"import { KYCItem } from \"./item\";\nimport { OperationFact } from \"../base\";\nimport { HINT } from \"../../alias\";\nimport { Address } from \"../../key\";\nimport { Bool } from \"../../types\";\nimport { Assert, ECODE, MitumError } from \"../../error\";\nexport class UpdateCustomerItem extends KYCItem {\n    constructor(contract, customer, status, currency) {\n        super(HINT.KYC.UPDATE_CUSTOMER.ITEM, contract, currency);\n        this.customer = Address.from(customer);\n        this.status = Bool.from(status);\n        Assert.check(this.contract.toString() !== this.customer.toString(), MitumError.detail(ECODE.INVALID_ITEM, \"contract is same with customer address\"));\n    }\n    toBuffer() {\n        return Buffer.concat([\n            super.toBuffer(),\n            this.customer.toBuffer(),\n            this.status.toBuffer(),\n            this.currency.toBuffer(),\n        ]);\n    }\n    toHintedObject() {\n        return {\n            ...super.toHintedObject(),\n            customer: this.customer.toString(),\n            status: this.status.v,\n        };\n    }\n    toString() {\n        return `${super.toString()}-${this.customer.toString()}`;\n    }\n}\nexport class UpdateCustomerFact extends OperationFact {\n    constructor(token, sender, items) {\n        super(HINT.KYC.UPDATE_CUSTOMER.FACT, token, sender, items);\n        Assert.check(new Set(items.map(it => it.toString())).size === items.length, MitumError.detail(ECODE.INVALID_ITEMS, \"duplicate customer found in items\"));\n    }\n    get operationHint() {\n        return HINT.KYC.UPDATE_CUSTOMER.OPERATION;\n    }\n}\n//# sourceMappingURL=update-customer.js.map","references":["/Users/ohayoung/Projects/npm/mitumjs/src/operation/kyc/item.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/base/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/alias/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/key/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/common/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/types/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/error/index.ts"],"map":"{\"version\":3,\"file\":\"update-customer.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/operation/kyc/update-customer.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,QAAQ,CAAA;AAChC,OAAO,EAAE,aAAa,EAAE,MAAM,SAAS,CAAA;AAEvC,OAAO,EAAE,IAAI,EAAE,MAAM,aAAa,CAAA;AAClC,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAA;AAEnC,OAAO,EAAE,IAAI,EAAgB,MAAM,aAAa,CAAA;AAChD,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,MAAM,aAAa,CAAA;AAEvD,MAAM,OAAO,kBAAmB,SAAQ,OAAO;IAI3C,YACI,QAA0B,EAC1B,QAA0B,EAC1B,MAAsB,EACtB,QAA6B;QAE7B,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,IAAI,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAA;QAExD,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;QACtC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QAE/B,MAAM,CAAC,KAAK,CACR,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,KAAK,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,EACrD,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,YAAY,EAAE,wCAAwC,CAAC,CAClF,CAAA;IACL,CAAC;IAED,QAAQ;QACJ,OAAO,MAAM,CAAC,MAAM,CAAC;YACjB,KAAK,CAAC,QAAQ,EAAE;YAChB,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE;YACxB,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;YACtB,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE;SAC3B,CAAC,CAAA;IACN,CAAC;IAED,cAAc;QACV,OAAO;YACH,GAAG,KAAK,CAAC,cAAc,EAAE;YACzB,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE;YAClC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;SACxB,CAAA;IACL,CAAC;IAED,QAAQ;QACJ,OAAO,GAAG,KAAK,CAAC,QAAQ,EAAE,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,EAAE,CAAA;IAC5D,CAAC;CACJ;AAED,MAAM,OAAO,kBAAmB,SAAQ,aAAiC;IACrE,YAAY,KAAa,EAAE,MAAwB,EAAE,KAA2B;QAC5E,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,CAAC,CAAA;QAE1D,MAAM,CAAC,KAAK,CACR,IAAI,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,KAAK,CAAC,MAAM,EAC7D,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,aAAa,EAAE,mCAAmC,CAAC,CAC9E,CAAA;IACL,CAAC;IAED,IAAI,aAAa;QACb,OAAO,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,SAAS,CAAA;IAC7C,CAAC;CACJ\"}","dts":{"name":"/Users/ohayoung/Projects/npm/mitumjs/node_modules/.cache/rollup-plugin-typescript2/placeholder/operation/kyc/update-customer.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"node\" />\nimport { KYCItem } from \"./item\";\nimport { OperationFact } from \"../base\";\nimport { Address } from \"../../key\";\nimport { CurrencyID } from \"../../common\";\nimport { Bool, HintedObject } from \"../../types\";\nexport declare class UpdateCustomerItem extends KYCItem {\n    readonly customer: Address;\n    readonly status: Bool;\n    constructor(contract: string | Address, customer: string | Address, status: boolean | Bool, currency: string | CurrencyID);\n    toBuffer(): Buffer;\n    toHintedObject(): HintedObject;\n    toString(): string;\n}\nexport declare class UpdateCustomerFact extends OperationFact<UpdateCustomerItem> {\n    constructor(token: string, sender: string | Address, items: UpdateCustomerItem[]);\n    get operationHint(): string;\n}\n"}}
