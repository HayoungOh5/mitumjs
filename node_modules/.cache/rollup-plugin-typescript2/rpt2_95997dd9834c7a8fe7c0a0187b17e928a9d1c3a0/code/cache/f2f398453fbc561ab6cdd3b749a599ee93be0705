{"code":"import Int64 from \"int64-buffer\";\nimport bigInt from \"big-integer\";\nimport { Assert, ECODE, MitumError } from \"../error\";\nexport class Big {\n    constructor(big) {\n        switch (typeof big) {\n            case \"number\":\n            case \"string\":\n            case \"bigint\":\n                this.big = BigInt(big);\n                break;\n            case \"object\":\n                if (big instanceof Buffer || big instanceof Uint8Array) {\n                    this.big = this.bufferToBig(big);\n                }\n                else {\n                    throw MitumError.detail(ECODE.INVALID_BIG_INTEGER, \"wrong big\");\n                }\n                break;\n            default:\n                throw MitumError.detail(ECODE.INVALID_BIG_INTEGER, \"wrong big\");\n        }\n    }\n    static from(big) {\n        return big instanceof Big ? big : new Big(big);\n    }\n    bufferToBig(big) {\n        const res = [];\n        Uint8Array.from(big).forEach((n) => {\n            let s = n.toString(16);\n            s.length % 2 ? res.push(\"0\" + s) : res.push(s);\n        });\n        return BigInt(\"0x\" + res.join(\"\"));\n    }\n    toBuffer(option) {\n        const size = this.byteLen();\n        if (option === \"fill\") {\n            Assert.check(size <= 8, MitumError.detail(ECODE.INVALID_BIG_INTEGER, \"big out of range\"));\n            return Buffer.from(new Int64.Uint64BE(this.toString()).toBuffer());\n        }\n        const buf = new Uint8Array(size);\n        let n = bigInt(this.big);\n        for (let i = size - 1; i >= 0; i--) {\n            buf[i] = n.mod(256).valueOf();\n            n = n.divide(256);\n        }\n        return Buffer.from(buf);\n    }\n    byteLen() {\n        const bitLen = bigInt(this.big).bitLength();\n        const quotient = bigInt(bitLen).divide(8);\n        if (bitLen.valueOf() - quotient.valueOf() * 8 > 0) {\n            return quotient.valueOf() + 1;\n        }\n        return quotient.valueOf();\n    }\n    get v() {\n        if (this.big <= BigInt(Number.MAX_SAFE_INTEGER)) {\n            return parseInt(this.toString());\n        }\n        return -1;\n    }\n    toString() {\n        return this.big.toString();\n    }\n    isZero() {\n        return this.big < 1;\n    }\n    compare(n) {\n        n = Big.from(n);\n        if (this.big < n.big) {\n            return -1;\n        }\n        else if (this.big > n.big) {\n            return 1;\n        }\n        return 0;\n    }\n}\nexport class Float {\n    constructor(n) {\n        this.n = n;\n    }\n    static from(n) {\n        return n instanceof Float ? n : new Float(n);\n    }\n    toBuffer() {\n        const b = Buffer.allocUnsafe(8);\n        b.writeDoubleBE(this.n);\n        return b;\n    }\n    toString() {\n        return \"\" + this.n;\n    }\n}\nexport class Uint8 {\n    constructor(n) {\n        Assert.check(0 <= n && n <= 255, MitumError.detail(ECODE.INVALID_UINT8, \"uint8 out of range\"));\n        this.n = n;\n    }\n    static from(n) {\n        return n instanceof Uint8 ? n : new Uint8(n);\n    }\n    toBuffer() {\n        const buffer = Buffer.alloc(1);\n        buffer.writeUint8(this.n, 0);\n        return buffer;\n    }\n    get v() {\n        return this.n;\n    }\n    toString() {\n        return this.n.toString();\n    }\n}\nexport class Bool {\n    constructor(b) {\n        this.b = b;\n    }\n    static from(b) {\n        return b instanceof Bool ? b : new Bool(b);\n    }\n    toBuffer() {\n        return this.b ? Buffer.from([1]) : Buffer.from([0]);\n    }\n    get v() {\n        return this.b;\n    }\n}\n//# sourceMappingURL=math.js.map","references":["/Users/ohayoung/Projects/npm/mitumjs/node_modules/int64-buffer/int64-buffer.d.ts","/Users/ohayoung/Projects/npm/mitumjs/node_modules/big-integer/BigInteger.d.ts","/Users/ohayoung/Projects/npm/mitumjs/src/types/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/error/index.ts"],"map":"{\"version\":3,\"file\":\"math.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/types/math.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/ohayoung/Projects/npm/mitumjs/node_modules/.cache/rollup-plugin-typescript2/placeholder/types/math.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"node\" />\nimport { IBuffer, IString } from \"../types\";\nexport declare class Big implements IBuffer, IString {\n    readonly big: bigint;\n    constructor(big: string | number | Buffer | BigInt | Uint8Array);\n    static from(big: string | number | Buffer | BigInt | Uint8Array | Big): Big;\n    private bufferToBig;\n    toBuffer(option?: \"fill\"): Buffer;\n    byteLen(): number;\n    get v(): number;\n    toString(): string;\n    isZero(): boolean;\n    compare(n: string | number | Big): 1 | 0 | -1;\n}\nexport declare class Float implements IBuffer, IString {\n    readonly n: number;\n    constructor(n: number);\n    static from(n: number | Float): Float;\n    toBuffer(): Buffer;\n    toString(): string;\n}\nexport declare class Uint8 implements IBuffer, IString {\n    readonly n: number;\n    constructor(n: number);\n    static from(n: number | Uint8): Uint8;\n    toBuffer(): Buffer;\n    get v(): number;\n    toString(): string;\n}\nexport declare class Bool implements IBuffer, IString {\n    private b;\n    constructor(b: boolean);\n    static from(b: boolean | Bool): Bool;\n    toBuffer(): Buffer;\n    get v(): boolean;\n}\n"}}
