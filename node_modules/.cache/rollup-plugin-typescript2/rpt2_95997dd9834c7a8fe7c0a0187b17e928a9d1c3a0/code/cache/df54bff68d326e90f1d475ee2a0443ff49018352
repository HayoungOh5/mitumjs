{"code":"import axios from \"axios\";\nimport { Address } from \"../../key\";\nimport { IP } from \"../../types\";\nconst url = (api, contract) => `${IP.from(api).toString()}/nft/${Address.from(contract).toString()}`;\nconst delegateUri = (delegateIP) => `${IP.from(delegateIP).toString()}?uri=`;\nasync function getNFT(api, contract, nftID, delegateIP) {\n    const apiPath = `${url(api, contract)}/${nftID}`;\n    return !delegateIP ? await axios.get(apiPath) : await axios.get(delegateUri(delegateIP) + encodeURIComponent(apiPath));\n}\nasync function getNFTs(api, contract, delegateIP) {\n    const apiPath = `${url(api, contract)}/nfts`;\n    return !delegateIP ? await axios.get(apiPath) : await axios.get(delegateUri(delegateIP) + encodeURIComponent(apiPath));\n}\nasync function getCollection(api, contract, delegateIP) {\n    const apiPath = `${url(api, contract)}/collection`;\n    return !delegateIP ? await axios.get(apiPath) : await axios.get(delegateUri(delegateIP) + encodeURIComponent(apiPath));\n}\nasync function getAccountOperators(api, contract, account, delegateIP) {\n    const apiPath = `${url(api, contract)}/account/${Address.from(account).toString()}/operators`;\n    return !delegateIP ? await axios.get(apiPath) : await axios.get(delegateUri(delegateIP) + encodeURIComponent(apiPath));\n}\nexport default {\n    getNFT,\n    getNFTs,\n    getCollection,\n    getAccountOperators,\n};\n//# sourceMappingURL=nft.js.map","references":["/Users/ohayoung/Projects/npm/mitumjs/node_modules/axios/index.d.ts","/Users/ohayoung/Projects/npm/mitumjs/src/key/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/types/index.ts"],"map":"{\"version\":3,\"file\":\"nft.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/api/models/nft.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,KAAK,MAAM,OAAO,CAAA;AAEzB,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAA;AACnC,OAAO,EAAO,EAAE,EAAE,MAAM,aAAa,CAAA;AAErC,MAAM,GAAG,GAAG,CACR,GAAgB,EAChB,QAA0B,EAC5B,EAAE,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,QAAQ,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAA;AAE1E,MAAM,WAAW,GAAG,CAAC,UAAuB,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,QAAQ,EAAE,OAAO,CAAA;AAEzF,KAAK,UAAU,MAAM,CACjB,GAAgB,EAChB,QAA0B,EAC1B,KAA4B,EAC5B,UAAuB;IAEvB,MAAM,OAAO,GAAG,GAAG,GAAG,CAAC,GAAG,EAAE,QAAQ,CAAC,IAAI,KAAK,EAAE,CAAC;IACjD,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC,GAAG,CAAC,WAAW,CAAC,UAAU,CAAC,GAAG,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAA;AAC1H,CAAC;AAED,KAAK,UAAU,OAAO,CAClB,GAAgB,EAChB,QAA0B,EAC1B,UAAuB;IAEvB,MAAM,OAAO,GAAG,GAAG,GAAG,CAAC,GAAG,EAAE,QAAQ,CAAC,OAAO,CAAC;IAC7C,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC,GAAG,CAAC,WAAW,CAAC,UAAU,CAAC,GAAG,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAA;AAC1H,CAAC;AAED,KAAK,UAAU,aAAa,CACxB,GAAgB,EAChB,QAA0B,EAC1B,UAAuB;IAEvB,MAAM,OAAO,GAAG,GAAG,GAAG,CAAC,GAAG,EAAE,QAAQ,CAAC,aAAa,CAAC;IACnD,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC,GAAG,CAAC,WAAW,CAAC,UAAU,CAAC,GAAG,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAA;AAC1H,CAAC;AAED,KAAK,UAAU,mBAAmB,CAC9B,GAAgB,EAChB,QAA0B,EAC1B,OAAyB,EACzB,UAAuB;IAEvB,MAAM,OAAO,GAAG,GAAG,GAAG,CAAC,GAAG,EAAE,QAAQ,CAAC,YAAY,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,YAAY,CAAC;IAC9F,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC,GAAG,CAAC,WAAW,CAAC,UAAU,CAAC,GAAG,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAA;AAC1H,CAAC;AAED,eAAe;IACX,MAAM;IACN,OAAO;IACP,aAAa;IACb,mBAAmB;CACtB,CAAA\"}","dts":{"name":"/Users/ohayoung/Projects/npm/mitumjs/node_modules/.cache/rollup-plugin-typescript2/placeholder/api/models/nft.d.ts","writeByteOrderMark":false,"text":"import { Address } from \"../../key\";\nimport { Big, IP } from \"../../types\";\ndeclare function getNFT(api: string | IP, contract: string | Address, nftID: string | number | Big, delegateIP: string | IP): Promise<import(\"axios\").AxiosResponse<any, any>>;\ndeclare function getNFTs(api: string | IP, contract: string | Address, delegateIP: string | IP): Promise<import(\"axios\").AxiosResponse<any, any>>;\ndeclare function getCollection(api: string | IP, contract: string | Address, delegateIP: string | IP): Promise<import(\"axios\").AxiosResponse<any, any>>;\ndeclare function getAccountOperators(api: string | IP, contract: string | Address, account: string | Address, delegateIP: string | IP): Promise<import(\"axios\").AxiosResponse<any, any>>;\ndeclare const _default: {\n    getNFT: typeof getNFT;\n    getNFTs: typeof getNFTs;\n    getCollection: typeof getCollection;\n    getAccountOperators: typeof getAccountOperators;\n};\nexport default _default;\n"}}
