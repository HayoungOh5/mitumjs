{"code":"import { CreateSecurityTokenItem, CreateSecurityTokenFact } from \"./create-security-token\";\nimport { IssueSecurityTokenItem, IssueSecurityTokenFact } from \"./issue-sercurity-token\";\nimport { AuthorizeOperatorItem, AuthorizeOperatorFact } from \"./authorize-operator\";\nimport { RevokeOperatorItem, RevokeOperatorFact } from \"./revoke-operator\";\nimport { RedeemTokenItem, RedeemTokenFact } from \"./redeem-token\";\nimport { SetDocumentFact } from \"./set-document\";\nimport { TransferSecurityTokenPartitionItem, TransferSecurityTokenPartitionFact } from \"./transfer-security-token-partition\";\nimport { contract, getAPIData } from \"../../api\";\nimport { ContractGenerator, Operation } from \"../base\";\nimport { TimeStamp } from \"../../types\";\nimport { Assert, ECODE, MitumError } from \"../../error\";\nexport class STO extends ContractGenerator {\n    constructor(networkID, api, delegateIP) {\n        super(networkID, api, delegateIP);\n    }\n    authorizeOperator(contractAddr, sender, operator, partition, currency) {\n        return new Operation(this.networkID, new AuthorizeOperatorFact(TimeStamp.new().UTC(), sender, [\n            new AuthorizeOperatorItem(contractAddr, operator, partition, currency)\n        ]));\n    }\n    createService(contractAddr, sender, data, currency) {\n        const keysToCheck = ['granularity', 'defaultPartition'];\n        keysToCheck.forEach((key) => {\n            Assert.check(data[key] !== undefined, MitumError.detail(ECODE.INVALID_DATA_STRUCTURE, `${key} is undefined, check the createServiceData structure`));\n        });\n        return new Operation(this.networkID, new CreateSecurityTokenFact(TimeStamp.new().UTC(), sender, [\n            new CreateSecurityTokenItem(contractAddr, data.granularity, data.defaultPartition, currency)\n        ]));\n    }\n    issue(contractAddr, sender, receiver, partition, amount, currency) {\n        return new Operation(this.networkID, new IssueSecurityTokenFact(TimeStamp.new().UTC(), sender, [\n            new IssueSecurityTokenItem(contractAddr, receiver, amount, partition, currency)\n        ]));\n    }\n    redeem(contractAddr, sender, tokenHolder, partition, amount, currency) {\n        return new Operation(this.networkID, new RedeemTokenFact(TimeStamp.new().UTC(), sender, [\n            new RedeemTokenItem(contractAddr, tokenHolder, amount, partition, currency)\n        ]));\n    }\n    revokeOperator(contractAddr, sender, operator, partition, currency) {\n        return new Operation(this.networkID, new RevokeOperatorFact(TimeStamp.new().UTC(), sender, [\n            new RevokeOperatorItem(contractAddr, operator, partition, currency)\n        ]));\n    }\n    setDocument(contractAddr, sender, title, uri, documentHash, currency) {\n        return new Operation(this.networkID, new SetDocumentFact(TimeStamp.new().UTC(), sender, contractAddr, title, uri, documentHash, currency));\n    }\n    transferByPartition(contractAddr, sender, holder, receiver, partition, amount, currency) {\n        return new Operation(this.networkID, new TransferSecurityTokenPartitionFact(TimeStamp.new().UTC(), sender, [\n            new TransferSecurityTokenPartitionItem(contractAddr, holder, receiver, partition, amount, currency)\n        ]));\n    }\n    async getServiceInfo(contractAddr) {\n        return await getAPIData(() => contract.sto.getService(this.api, contractAddr, this.delegateIP));\n    }\n    async getPartitionsInfo(contractAddr, holder) {\n        return await getAPIData(() => contract.sto.getPartitions(this.api, contractAddr, holder, this.delegateIP));\n    }\n    async getBalanceByHolder(contractAddr, holder, partition) {\n        return await getAPIData(() => contract.sto.getBalanceByHolder(this.api, contractAddr, holder, partition, this.delegateIP));\n    }\n    async getOperatorsByHolder(contractAddr, holder, partition) {\n        return await getAPIData(() => contract.sto.getOperatorsByHolder(this.api, contractAddr, holder, partition, this.delegateIP));\n    }\n    async getPartitionBalanceInfo(contractAddr, partition) {\n        return await getAPIData(() => contract.sto.getPartitionBalance(this.api, contractAddr, partition, this.delegateIP));\n    }\n    async getAuthorizedInfo(contractAddr, operator) {\n        return await getAPIData(() => contract.sto.getAuthorized(this.api, contractAddr, operator, this.delegateIP));\n    }\n}\n//# sourceMappingURL=index.js.map","references":["/Users/ohayoung/Projects/npm/mitumjs/src/operation/sto/create-security-token.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/sto/issue-sercurity-token.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/sto/authorize-operator.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/sto/revoke-operator.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/sto/redeem-token.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/sto/set-document.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/sto/transfer-security-token-partition.ts","/Users/ohayoung/Projects/npm/mitumjs/src/api/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/sto/partition.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/base/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/key/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/common/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/types/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/error/index.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/operation/sto/index.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/ohayoung/Projects/npm/mitumjs/node_modules/.cache/rollup-plugin-typescript2/placeholder/operation/sto/index.d.ts","writeByteOrderMark":false,"text":"import { CreateSecurityTokenFact } from \"./create-security-token\";\nimport { IssueSecurityTokenFact } from \"./issue-sercurity-token\";\nimport { AuthorizeOperatorFact } from \"./authorize-operator\";\nimport { RevokeOperatorFact } from \"./revoke-operator\";\nimport { RedeemTokenFact } from \"./redeem-token\";\nimport { SetDocumentFact } from \"./set-document\";\nimport { TransferSecurityTokenPartitionFact } from \"./transfer-security-token-partition\";\nimport { Partition } from \"./partition\";\nimport { ContractGenerator, Operation } from \"../base\";\nimport { Address } from \"../../key\";\nimport { CurrencyID } from \"../../common\";\nimport { Big, IP } from \"../../types\";\ntype createServiceData = {\n    granularity: string | number | Big;\n    defaultPartition: string | Partition;\n};\nexport declare class STO extends ContractGenerator {\n    constructor(networkID: string, api?: string | IP, delegateIP?: string | IP);\n    authorizeOperator(contractAddr: string | Address, sender: string | Address, operator: string | Address, partition: string | Partition, currency: string | CurrencyID): Operation<AuthorizeOperatorFact>;\n    createService(contractAddr: string | Address, sender: string | Address, data: createServiceData, currency: string | CurrencyID): Operation<CreateSecurityTokenFact>;\n    issue(contractAddr: string | Address, sender: string | Address, receiver: string | Address, partition: string | Partition, amount: string | number | Big, currency: string | CurrencyID): Operation<IssueSecurityTokenFact>;\n    redeem(contractAddr: string | Address, sender: string | Address, tokenHolder: string | Address, partition: string | Partition, amount: string | number | Big, currency: string | CurrencyID): Operation<RedeemTokenFact>;\n    revokeOperator(contractAddr: string | Address, sender: string | Address, operator: string | Address, partition: string | Partition, currency: string | CurrencyID): Operation<RevokeOperatorFact>;\n    setDocument(contractAddr: string | Address, sender: string | Address, title: string, uri: string, documentHash: string, currency: string | CurrencyID): Operation<SetDocumentFact>;\n    transferByPartition(contractAddr: string | Address, sender: string | Address, holder: string | Address, receiver: string | Address, partition: string | Partition, amount: string | number | Big, currency: string | CurrencyID): Operation<TransferSecurityTokenPartitionFact>;\n    getServiceInfo(contractAddr: string | Address): Promise<any>;\n    getPartitionsInfo(contractAddr: string | Address, holder: string | Address): Promise<any>;\n    getBalanceByHolder(contractAddr: string | Address, holder: string | Address, partition: string): Promise<any>;\n    getOperatorsByHolder(contractAddr: string | Address, holder: string | Address, partition: string): Promise<any>;\n    getPartitionBalanceInfo(contractAddr: string | Address, partition: string): Promise<any>;\n    getAuthorizedInfo(contractAddr: string | Address, operator: string | Address): Promise<any>;\n}\nexport {};\n"}}
