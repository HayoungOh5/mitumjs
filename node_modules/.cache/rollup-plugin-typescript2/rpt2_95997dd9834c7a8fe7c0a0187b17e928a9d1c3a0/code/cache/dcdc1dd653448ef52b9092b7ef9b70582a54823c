{"code":"import { TokenFact } from \"./fact\";\nimport { HINT } from \"../../alias\";\nimport { CurrencyID } from \"../../common\";\nimport { Big, LongString } from \"../../types\";\nimport { Assert, ECODE, MitumError } from \"../../error\";\nexport class RegisterTokenFact extends TokenFact {\n    constructor(token, sender, contract, currency, symbol, name, initialSupply) {\n        super(HINT.TOKEN.REGISTER_TOKEN.FACT, token, sender, contract, currency);\n        this.symbol = CurrencyID.from(symbol);\n        this.name = LongString.from(name);\n        this.initialSupply = Big.from(initialSupply);\n        Assert.check(this.initialSupply.compare(0) > 0, MitumError.detail(ECODE.INVALID_FACT, \"initialSupply under zero\"));\n        this._hash = this.hashing();\n    }\n    toBuffer() {\n        return Buffer.concat([\n            super.toBuffer(),\n            this.symbol.toBuffer(),\n            this.name.toBuffer(),\n            this.initialSupply.toBuffer(),\n        ]);\n    }\n    toHintedObject() {\n        return {\n            ...super.toHintedObject(),\n            symbol: this.symbol.toString(),\n            name: this.name.toString(),\n            initial_supply: this.initialSupply.toString(),\n        };\n    }\n    get operationHint() {\n        return HINT.TOKEN.REGISTER_TOKEN.OPERATION;\n    }\n}\n//# sourceMappingURL=register-token.js.map","references":["/Users/ohayoung/Projects/npm/mitumjs/src/operation/token/fact.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/base/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/alias/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/key/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/common/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/types/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/error/index.ts"],"map":"{\"version\":3,\"file\":\"register-token.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/operation/token/register-token.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,QAAQ,CAAA;AAElC,OAAO,EAAE,IAAI,EAAE,MAAM,aAAa,CAAA;AAElC,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAA;AACzC,OAAO,EAAE,GAAG,EAAE,UAAU,EAAE,MAAM,aAAa,CAAA;AAC7C,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,MAAM,aAAa,CAAA;AAEvD,MAAM,OAAO,iBAAkB,SAAQ,SAAS;IAK5C,YACI,KAAa,EACb,MAAwB,EACxB,QAA0B,EAC1B,QAA6B,EAC7B,MAA2B,EAC3B,IAAyB,EACzB,aAAoC;QAEpC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAA;QACxE,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QACrC,IAAI,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QACjC,IAAI,CAAC,aAAa,GAAG,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,CAAA;QAE5C,MAAM,CAAC,KAAK,CACR,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,EACjC,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,YAAY,EAAE,0BAA0B,CAAC,CACpE,CAAA;QACD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,EAAE,CAAA;IAC/B,CAAC;IAED,QAAQ;QACJ,OAAO,MAAM,CAAC,MAAM,CAAC;YACjB,KAAK,CAAC,QAAQ,EAAE;YAChB,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;YACtB,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YACpB,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE;SAChC,CAAC,CAAA;IACN,CAAC;IAED,cAAc;QACV,OAAO;YACH,GAAG,KAAK,CAAC,cAAc,EAAE;YACzB,MAAM,EAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;YAC/B,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAC1B,cAAc,EAAE,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE;SAChD,CAAA;IACL,CAAC;IAED,IAAI,aAAa;QACb,OAAO,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,SAAS,CAAA;IAC9C,CAAC;CACJ\"}","dts":{"name":"/Users/ohayoung/Projects/npm/mitumjs/node_modules/.cache/rollup-plugin-typescript2/placeholder/operation/token/register-token.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"node\" />\nimport { TokenFact } from \"./fact\";\nimport { FactJson } from \"../base\";\nimport { Address } from \"../../key\";\nimport { CurrencyID } from \"../../common\";\nimport { Big, LongString } from \"../../types\";\nexport declare class RegisterTokenFact extends TokenFact {\n    readonly symbol: CurrencyID;\n    readonly name: LongString;\n    readonly initialSupply: Big;\n    constructor(token: string, sender: string | Address, contract: string | Address, currency: string | CurrencyID, symbol: string | CurrencyID, name: string | LongString, initialSupply: string | number | Big);\n    toBuffer(): Buffer;\n    toHintedObject(): FactJson;\n    get operationHint(): string;\n}\n"}}
