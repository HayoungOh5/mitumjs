{"code":"import currency from \"./currency\";\nimport nft from \"./nft\";\nimport credential from \"./credential\";\nimport dao from \"./dao\";\nimport kyc from \"./kyc\";\nimport sto from \"./sto\";\nimport timestamp from \"./timestamp\";\nimport token from \"./token\";\nimport point from \"./point\";\nexport default {\n    currency,\n    contract: {\n        nft,\n        credential,\n        dao,\n        kyc,\n        sto,\n        timestamp,\n        token,\n        point,\n    },\n};\n//# sourceMappingURL=index.js.map","references":["/Users/ohayoung/Projects/npm/mitumjs/src/api/models/currency.ts","/Users/ohayoung/Projects/npm/mitumjs/src/api/models/nft.ts","/Users/ohayoung/Projects/npm/mitumjs/src/api/models/credential.ts","/Users/ohayoung/Projects/npm/mitumjs/src/api/models/dao.ts","/Users/ohayoung/Projects/npm/mitumjs/src/api/models/kyc.ts","/Users/ohayoung/Projects/npm/mitumjs/src/api/models/sto.ts","/Users/ohayoung/Projects/npm/mitumjs/src/api/models/timestamp.ts","/Users/ohayoung/Projects/npm/mitumjs/src/api/models/token.ts","/Users/ohayoung/Projects/npm/mitumjs/src/api/models/point.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/api/models/index.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,QAAQ,MAAM,YAAY,CAAA;AACjC,OAAO,GAAG,MAAM,OAAO,CAAA;AACvB,OAAO,UAAU,MAAM,cAAc,CAAA;AACrC,OAAO,GAAG,MAAM,OAAO,CAAA;AACvB,OAAO,GAAG,MAAM,OAAO,CAAA;AACvB,OAAO,GAAG,MAAM,OAAO,CAAA;AACvB,OAAO,SAAS,MAAM,aAAa,CAAA;AACnC,OAAO,KAAK,MAAM,SAAS,CAAA;AAC3B,OAAO,KAAK,MAAM,SAAS,CAAA;AAE3B,eAAe;IACX,QAAQ;IACR,QAAQ,EAAE;QACN,GAAG;QACH,UAAU;QACV,GAAG;QACH,GAAG;QACH,GAAG;QACH,SAAS;QACT,KAAK;QACL,KAAK;KACR;CACJ,CAAA\"}","dts":{"name":"/Users/ohayoung/Projects/npm/mitumjs/node_modules/.cache/rollup-plugin-typescript2/placeholder/api/models/index.d.ts","writeByteOrderMark":false,"text":"declare const _default: {\n    currency: {\n        getCurrencies: (api: string | import(\"../../types\").IP, delegateIP: string | import(\"../../types\").IP) => Promise<import(\"axios\").AxiosResponse<any, any>>;\n        getCurrency: (api: string | import(\"../../types\").IP, currency: string | import(\"../../common\").CurrencyID, delegateIP: string | import(\"../../types\").IP) => Promise<import(\"axios\").AxiosResponse<any, any>>;\n    };\n    contract: {\n        nft: {\n            getNFT: (api: string | import(\"../../types\").IP, contract: string | import(\"../../key\").Address, nftID: string | number | import(\"../../types\").Big, delegateIP: string | import(\"../../types\").IP) => Promise<import(\"axios\").AxiosResponse<any, any>>;\n            getNFTs: (api: string | import(\"../../types\").IP, contract: string | import(\"../../key\").Address, delegateIP: string | import(\"../../types\").IP) => Promise<import(\"axios\").AxiosResponse<any, any>>;\n            getCollection: (api: string | import(\"../../types\").IP, contract: string | import(\"../../key\").Address, delegateIP: string | import(\"../../types\").IP) => Promise<import(\"axios\").AxiosResponse<any, any>>;\n            getAccountOperators: (api: string | import(\"../../types\").IP, contract: string | import(\"../../key\").Address, account: string | import(\"../../key\").Address, delegateIP: string | import(\"../../types\").IP) => Promise<import(\"axios\").AxiosResponse<any, any>>;\n        };\n        credential: {\n            getIssuer: (api: string | import(\"../../types\").IP, contract: string | import(\"../../key\").Address, delegateIP: string | import(\"../../types\").IP) => Promise<import(\"axios\").AxiosResponse<any, any>>;\n            getCredential: (api: string | import(\"../../types\").IP, contract: string | import(\"../../key\").Address, templateID: string, credentialID: string, delegateIP: string | import(\"../../types\").IP) => Promise<import(\"axios\").AxiosResponse<any, any>>;\n            getTemplate: (api: string | import(\"../../types\").IP, contract: string | import(\"../../key\").Address, templateID: string, delegateIP: string | import(\"../../types\").IP) => Promise<import(\"axios\").AxiosResponse<any, any>>;\n            getCredentials: (api: string | import(\"../../types\").IP, contract: string | import(\"../../key\").Address, templateID: string, delegateIP: string | import(\"../../types\").IP) => Promise<import(\"axios\").AxiosResponse<any, any>>;\n            getCredentialByHolder: (api: string | import(\"../../types\").IP, contract: string | import(\"../../key\").Address, holder: string | import(\"../../key\").Address, delegateIP: string | import(\"../../types\").IP) => Promise<import(\"axios\").AxiosResponse<any, any>>;\n        };\n        dao: {\n            getService: (api: string | import(\"../../types\").IP, contract: string | import(\"../../key\").Address, delegateIP: string | import(\"../../types\").IP) => Promise<import(\"axios\").AxiosResponse<any, any>>;\n            getProposal: (api: string | import(\"../../types\").IP, contract: string | import(\"../../key\").Address, proposalID: string, delegateIP: string | import(\"../../types\").IP) => Promise<import(\"axios\").AxiosResponse<any, any>>;\n            getDelegator: (api: string | import(\"../../types\").IP, contract: string | import(\"../../key\").Address, proposalID: string, delegator: string | import(\"../../key\").Address, delegateIP: string | import(\"../../types\").IP) => Promise<import(\"axios\").AxiosResponse<any, any>>;\n            getVoter: (api: string | import(\"../../types\").IP, contract: string | import(\"../../key\").Address, proposalID: string, delegateIP: string | import(\"../../types\").IP) => Promise<import(\"axios\").AxiosResponse<any, any>>;\n            getVotingResult: (api: string | import(\"../../types\").IP, contract: string | import(\"../../key\").Address, proposalID: string, delegateIP: string | import(\"../../types\").IP) => Promise<import(\"axios\").AxiosResponse<any, any>>;\n        };\n        kyc: {};\n        sto: {\n            getService: (api: string | import(\"../../types\").IP, contract: string | import(\"../../key\").Address, delegateIP: string | import(\"../../types\").IP) => Promise<import(\"axios\").AxiosResponse<any, any>>;\n            getPartitions: (api: string | import(\"../../types\").IP, contract: string | import(\"../../key\").Address, holder: string | import(\"../../key\").Address, delegateIP: string | import(\"../../types\").IP) => Promise<import(\"axios\").AxiosResponse<any, any>>;\n            getBalanceByHolder: (api: string | import(\"../../types\").IP, contract: string | import(\"../../key\").Address, holder: string | import(\"../../key\").Address, partition: string, delegateIP: string | import(\"../../types\").IP) => Promise<import(\"axios\").AxiosResponse<any, any>>;\n            getOperatorsByHolder: (api: string | import(\"../../types\").IP, contract: string | import(\"../../key\").Address, holder: string | import(\"../../key\").Address, partition: string, delegateIP: string | import(\"../../types\").IP) => Promise<import(\"axios\").AxiosResponse<any, any>>;\n            getPartitionBalance: (api: string | import(\"../../types\").IP, contract: string | import(\"../../key\").Address, partition: string, delegateIP: string | import(\"../../types\").IP) => Promise<import(\"axios\").AxiosResponse<any, any>>;\n            getAuthorized: (api: string | import(\"../../types\").IP, contract: string | import(\"../../key\").Address, operator: string | import(\"../../key\").Address, delegateIP: string | import(\"../../types\").IP) => Promise<import(\"axios\").AxiosResponse<any, any>>;\n        };\n        timestamp: {\n            getService: (api: string | import(\"../../types\").IP, contract: string | import(\"../../key\").Address, delegateIP: string | import(\"../../types\").IP) => Promise<import(\"axios\").AxiosResponse<any, any>>;\n            getTimeStamp: (api: string | import(\"../../types\").IP, contract: string | import(\"../../key\").Address, projectID: string, tid: string | number | import(\"../../types\").Big, delegateIP: string | import(\"../../types\").IP) => Promise<import(\"axios\").AxiosResponse<any, any>>;\n        };\n        token: {\n            getToken: (api: string | import(\"../../types\").IP, contract: string | import(\"../../key\").Address, delegateIP: string | import(\"../../types\").IP) => Promise<import(\"axios\").AxiosResponse<any, any>>;\n            getTokenBalance: (api: string | import(\"../../types\").IP, contract: string | import(\"../../key\").Address, account: string | import(\"../../key\").Address, delegateIP: string | import(\"../../types\").IP) => Promise<import(\"axios\").AxiosResponse<any, any>>;\n        };\n        point: {\n            getPoint: (api: string | import(\"../../types\").IP, contract: string | import(\"../../key\").Address, delegateIP: string | import(\"../../types\").IP) => Promise<import(\"axios\").AxiosResponse<any, any>>;\n            getPointBalance: (api: string | import(\"../../types\").IP, contract: string | import(\"../../key\").Address, account: string | import(\"../../key\").Address, delegateIP: string | import(\"../../types\").IP) => Promise<import(\"axios\").AxiosResponse<any, any>>;\n        };\n    };\n};\nexport default _default;\n"}}
