{"code":"import { NFTItem } from \"./item\";\nimport { OperationFact } from \"../base\";\nimport { HINT } from \"../../alias\";\nimport { Address } from \"../../key\";\nimport { Big } from \"../../types\";\nimport { Assert, ECODE, MitumError } from \"../../error\";\nexport class ApproveItem extends NFTItem {\n    constructor(contract, approved, nftIDX, currency) {\n        super(HINT.NFT.APPROVE.ITEM, contract, currency);\n        this.approved = Address.from(approved);\n        this.nftIDX = Big.from(nftIDX);\n    }\n    toBuffer() {\n        return Buffer.concat([\n            super.toBuffer(),\n            this.approved.toBuffer(),\n            this.nftIDX.toBuffer(\"fill\"),\n            this.currency.toBuffer(),\n        ]);\n    }\n    toHintedObject() {\n        return {\n            ...super.toHintedObject(),\n            approved: this.approved.toString(),\n            nftidx: this.nftIDX.v,\n        };\n    }\n    toString() {\n        return `${super.toString()}-${this.approved.toString()}`;\n    }\n}\nexport class ApproveFact extends OperationFact {\n    constructor(token, sender, items) {\n        super(HINT.NFT.APPROVE.FACT, token, sender, items);\n        Assert.check(new Set(items.map(it => it.toString())).size === items.length, MitumError.detail(ECODE.INVALID_ITEMS, \"duplicate approve found in items\"));\n        this.items.forEach(it => Assert.check(this.sender.toString() != it.contract.toString(), MitumError.detail(ECODE.INVALID_ITEMS, \"sender is same with contract address\")));\n    }\n    get operationHint() {\n        return HINT.NFT.APPROVE.OPERATION;\n    }\n}\n//# sourceMappingURL=approve.js.map","references":["/Users/ohayoung/Projects/npm/mitumjs/src/operation/nft/item.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/base/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/alias/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/key/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/common/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/types/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/error/index.ts"],"map":"{\"version\":3,\"file\":\"approve.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/operation/nft/approve.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,QAAQ,CAAA;AAChC,OAAO,EAAE,aAAa,EAAE,MAAM,SAAS,CAAA;AAEvC,OAAO,EAAE,IAAI,EAAE,MAAM,aAAa,CAAA;AAClC,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAA;AAEnC,OAAO,EAAE,GAAG,EAAgB,MAAM,aAAa,CAAA;AAC/C,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,MAAM,aAAa,CAAA;AAEvD,MAAM,OAAO,WAAY,SAAQ,OAAO;IAIpC,YACI,QAA0B,EAC1B,QAA0B,EAC1B,MAA6B,EAC7B,QAA6B;QAE7B,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAA;QAEhD,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;QACtC,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;IAClC,CAAC;IAED,QAAQ;QACJ,OAAO,MAAM,CAAC,MAAM,CAAC;YACjB,KAAK,CAAC,QAAQ,EAAE;YAChB,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE;YACxB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;YAC5B,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE;SAC3B,CAAC,CAAA;IACN,CAAC;IAED,cAAc;QACV,OAAO;YACH,GAAG,KAAK,CAAC,cAAc,EAAE;YACzB,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE;YAClC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;SACxB,CAAA;IACL,CAAC;IAED,QAAQ;QACJ,OAAO,GAAG,KAAK,CAAC,QAAQ,EAAE,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,EAAE,CAAA;IAC5D,CAAC;CACJ;AAED,MAAM,OAAO,WAAY,SAAQ,aAA0B;IACvD,YAAY,KAAa,EAAE,MAAwB,EAAE,KAAoB;QACrE,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,CAAC,CAAA;QAElD,MAAM,CAAC,KAAK,CACR,IAAI,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,KAAK,CAAC,MAAM,EAC7D,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,aAAa,EAAE,kCAAkC,CAAC,CAC7E,CAAA;QAED,IAAI,CAAC,KAAK,CAAC,OAAO,CACd,EAAE,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,CACd,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,EAAE,CAAC,QAAQ,CAAC,QAAQ,EAAE,EAChD,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,aAAa,EAAE,sCAAsC,CAAC,CACjF,CACJ,CAAA;IACL,CAAC;IAED,IAAI,aAAa;QACb,OAAO,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,SAAS,CAAA;IACrC,CAAC;CACJ\"}","dts":{"name":"/Users/ohayoung/Projects/npm/mitumjs/node_modules/.cache/rollup-plugin-typescript2/placeholder/operation/nft/approve.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"node\" />\nimport { NFTItem } from \"./item\";\nimport { OperationFact } from \"../base\";\nimport { Address } from \"../../key\";\nimport { CurrencyID } from \"../../common\";\nimport { Big, HintedObject } from \"../../types\";\nexport declare class ApproveItem extends NFTItem {\n    readonly approved: Address;\n    readonly nftIDX: Big;\n    constructor(contract: string | Address, approved: string | Address, nftIDX: string | number | Big, currency: string | CurrencyID);\n    toBuffer(): Buffer;\n    toHintedObject(): HintedObject;\n    toString(): string;\n}\nexport declare class ApproveFact extends OperationFact<ApproveItem> {\n    constructor(token: string, sender: string | Address, items: ApproveItem[]);\n    get operationHint(): string;\n}\n"}}
