{"code":"import { __awaiter } from \"tslib\";\nimport { CreateAccountItem, CreateAccountFact } from \"./create-account\";\nimport { UpdateKeyFact } from \"./update-key\";\nimport { TransferItem, TransferFact } from \"./transfer\";\nimport { CreateContractAccountItem, CreateContractAccountFact } from \"./create-contract-account\";\nimport { WithdrawItem, WithdrawFact } from \"./withdraw\";\nimport { UpdateOperatorFact } from \"./update-operator\";\nimport { RegisterCurrencyFact } from \"./register-currency\";\nimport { UpdateCurrencyFact } from \"./update-currency\";\nimport { MintItem, MintFact } from \"./mint\";\nimport { CurrencyDesign, CurrencyPolicy, NilFeeer, FixedFeeer, RatioFeeer } from \"./currency-design\";\nimport { Operation } from \"../base\";\nimport api, { getAPIData } from \"../../api\";\nimport { Amount } from \"../../common\";\nimport { Generator, TimeStamp } from \"../../types\";\nimport { KeyPair, Keys, PubKey, KeyG, EtherKeys } from \"../../key\";\nimport { Assert, ECODE, MitumError } from \"../../error\";\nexport class Currency extends Generator {\n    constructor(networkID, api, delegateIP) {\n        super(networkID, api, delegateIP);\n    }\n    create(data) {\n        const keysToCheck = ['currency', 'genesisAddress', 'totalSupply', 'minBalance', 'feeType', 'feeReceiver'];\n        keysToCheck.forEach((key) => {\n            Assert.check(data[key] !== undefined, MitumError.detail(ECODE.INVALID_DATA_STRUCTURE, `${key} is undefined, check the createData structure`));\n        });\n        const amount = new Amount(data.currency, data.totalSupply);\n        const design = new CurrencyDesign(amount, data.genesisAddress, this.buildPolicy(data.feeType, data.minBalance, data.feeReceiver, data.fee, data.ratio, data.minFee, data.maxFee));\n        return new Operation(this.networkID, new RegisterCurrencyFact(TimeStamp.new().UTC(), design));\n    }\n    setPolicy(data) {\n        const keysToCheck = ['currency', 'genesisAddress', 'totalSupply', 'minBalance', 'feeType', 'feeReceiver'];\n        keysToCheck.forEach((key) => {\n            Assert.check(data[key] !== undefined, MitumError.detail(ECODE.INVALID_DATA_STRUCTURE, `${key} is undefined, check the createData structure`));\n        });\n        return new Operation(this.networkID, new UpdateCurrencyFact(TimeStamp.new().UTC(), data.currency, this.buildPolicy(data.feeType, data.minBalance, data.feeReceiver, data.fee, data.ratio, data.minFee, data.maxFee)));\n    }\n    buildPolicy(feeType, minBalance, receiver, fee, ratio, min, max) {\n        switch (feeType) {\n            case \"nil\":\n                return new CurrencyPolicy(minBalance, new NilFeeer());\n            case \"fixed\":\n                Assert.check(fee !== undefined, MitumError.detail(ECODE.CURRENCY.INVALID_CURRENCY_FEEER, \"no fee\"));\n                return new CurrencyPolicy(minBalance, new FixedFeeer(receiver, fee));\n            case \"ratio\":\n                Assert.check(ratio !== undefined, MitumError.detail(ECODE.CURRENCY.INVALID_CURRENCY_FEEER, \"no ratio\"));\n                Assert.check(min !== undefined, MitumError.detail(ECODE.CURRENCY.INVALID_CURRENCY_FEEER, \"no min fee\"));\n                Assert.check(max !== undefined, MitumError.detail(ECODE.CURRENCY.INVALID_CURRENCY_FEEER, \"no max fee\"));\n                return new CurrencyPolicy(minBalance, new RatioFeeer(receiver, ratio, min, max));\n            default:\n                throw MitumError.detail(ECODE.CURRENCY.INVALID_CURRENCY_FEEER, \"invalid fee type\");\n        }\n    }\n    transfer(sender, receiver, currency, amount) {\n        return new Operation(this.networkID, new TransferFact(TimeStamp.new().UTC(), sender, [\n            new TransferItem(receiver, [new Amount(currency, amount)])\n        ]));\n    }\n    withdraw(sender, target, currency, amount) {\n        return new Operation(this.networkID, new WithdrawFact(TimeStamp.new().UTC(), sender, [\n            new WithdrawItem(target, [new Amount(currency, amount)])\n        ]));\n    }\n    mint(receiver, currency, amount) {\n        return new Operation(this.networkID, new MintFact(TimeStamp.new().UTC(), [\n            new MintItem(receiver, new Amount(currency, amount))\n        ]));\n    }\n    getAllCurrencies() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const datas = yield getAPIData(() => api.currency.getCurrencies(this.api, this.delegateIP));\n            return datas\n                ? Object.keys(datas._links).filter(c => !(c === \"self\" || c === \"currency:{currencyid}\")).map(c => c)\n                : null;\n        });\n    }\n    getCurrency(cid) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = yield getAPIData(() => api.currency.getCurrency(this.api, cid, this.delegateIP));\n            return data ? data._embedded : null;\n        });\n    }\n}\nexport class Account extends KeyG {\n    constructor(networkID, api, delegateIP) {\n        super(networkID, api, delegateIP);\n    }\n    createWallet(sender, currency, amount, seed, weight) {\n        const kp = seed ? KeyPair.fromSeed(seed) : KeyPair.random();\n        const ks = new Keys([new PubKey(kp.publicKey, weight !== null && weight !== void 0 ? weight : 100)], weight !== null && weight !== void 0 ? weight : 100);\n        return {\n            wallet: {\n                privatekey: kp.privateKey.toString(),\n                publickey: kp.publicKey.toString(),\n                address: ks.address.toString(),\n            },\n            operation: new Operation(this.networkID, new CreateAccountFact(TimeStamp.new().UTC(), sender, [\n                new CreateAccountItem(ks, [new Amount(currency, amount)], \"mitum\")\n            ])),\n        };\n    }\n    createEtherWallet(sender, currency, amount, seed, weight) {\n        const kp = seed ? KeyPair.fromSeed(seed, \"ether\") : KeyPair.random(\"ether\");\n        const ks = new EtherKeys([new PubKey(kp.publicKey, weight !== null && weight !== void 0 ? weight : 100)], weight !== null && weight !== void 0 ? weight : 100);\n        return {\n            wallet: {\n                privatekey: kp.privateKey.toString(),\n                publickey: kp.publicKey.toString(),\n                address: this.etherAddress(kp.publicKey),\n            },\n            operation: new Operation(this.networkID, new CreateAccountFact(TimeStamp.new().UTC(), sender, [\n                new CreateAccountItem(ks, [new Amount(currency, amount)], \"ether\")\n            ])),\n        };\n    }\n    createBatchWallet(sender, n, currency, amount) {\n        const keyArray = this.keys(n);\n        const ksArray = keyArray.map((key) => new Keys([new PubKey(key.publickey, 100)], 100));\n        const items = ksArray.map((ks) => new CreateAccountItem(ks, [new Amount(currency, amount)], \"mitum\"));\n        return {\n            wallet: keyArray,\n            operation: new Operation(this.networkID, new CreateAccountFact(TimeStamp.new().UTC(), sender, items)),\n        };\n    }\n    createAccount(sender, key, currency, amount) {\n        return new Operation(this.networkID, new CreateAccountFact(TimeStamp.new().UTC(), sender, [\n            new CreateAccountItem(new Keys([new PubKey(key, 100)], 100), [new Amount(currency, amount)], \"mitum\")\n        ]));\n    }\n    createEtherAccount(sender, key, currency, amount) {\n        return new Operation(this.networkID, new CreateAccountFact(TimeStamp.new().UTC(), sender, [\n            new CreateAccountItem(new EtherKeys([new PubKey(key, 100)], 100), [new Amount(currency, amount)], \"ether\")\n        ]));\n    }\n    createMultiSig(sender, keys, currency, amount, threshold) {\n        return new Operation(this.networkID, new CreateAccountFact(TimeStamp.new().UTC(), sender, [\n            new CreateAccountItem(new Keys(keys.map(k => k instanceof PubKey ? k : new PubKey(k.key, k.weight)), threshold), [new Amount(currency, amount)], \"mitum\")\n        ]));\n    }\n    createEtherMultiSig(sender, keys, currency, amount, threshold) {\n        return new Operation(this.networkID, new CreateAccountFact(TimeStamp.new().UTC(), sender, [\n            new CreateAccountItem(new EtherKeys(keys.map(k => k instanceof PubKey ? k : new PubKey(k.key, k.weight)), threshold), [new Amount(currency, amount)], \"ether\")\n        ]));\n    }\n    update(target, newKey, currency) {\n        const suffix = target.toString().slice(-3);\n        if (suffix === \"mca\") {\n            return new Operation(this.networkID, new UpdateKeyFact(TimeStamp.new().UTC(), target, new Keys([new PubKey(newKey, 100)], 100), currency));\n        }\n        return new Operation(this.networkID, new UpdateKeyFact(TimeStamp.new().UTC(), target, new EtherKeys([new PubKey(newKey, 100)], 100), currency));\n    }\n    updateMultiSig(target, newKeys, currency, threshold) {\n        const suffix = target.toString().slice(-3);\n        if (suffix === \"mca\") {\n            return new Operation(this.networkID, new UpdateKeyFact(TimeStamp.new().UTC(), target, new Keys(newKeys.map(k => k instanceof PubKey ? k : new PubKey(k.key, k.weight)), threshold), currency));\n        }\n        return new Operation(this.networkID, new UpdateKeyFact(TimeStamp.new().UTC(), target, new EtherKeys(newKeys.map(k => k instanceof PubKey ? k : new PubKey(k.key, k.weight)), threshold), currency));\n    }\n    getMultiSigAddress(keys, threshold) {\n        const keysArray = new Keys(keys.map(k => k instanceof PubKey ? k : new PubKey(k.key, k.weight)), threshold);\n        return keysArray.address.toString(); // btc\n    }\n    touch(privatekey, wallet) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const op = wallet.operation;\n            op.sign(privatekey);\n            return yield getAPIData(() => api.operation.send(this.api, op.toHintedObject(), this.delegateIP));\n        });\n    }\n    getAccountInfo(address) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = yield getAPIData(() => api.account.getAccount(this.api, address, this.delegateIP));\n            return data ? data._embedded : null;\n        });\n    }\n    getOperations(address) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = yield getAPIData(() => api.operation.getAccountOperations(this.api, address, this.delegateIP));\n            return data ? data._embedded : null;\n        });\n    }\n    getByPublickey(publickey) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = yield getAPIData(() => api.account.getAccountByPublicKey(this.api, publickey, this.delegateIP));\n            return data ? data._embedded : null;\n        });\n    }\n    balance(address) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = yield getAPIData(() => api.account.getAccount(this.api, address, this.delegateIP));\n            return data ? data._embedded.balance : null;\n        });\n    }\n}\nexport class Contract extends Generator {\n    constructor(networkID, api, delegateIP) {\n        super(networkID, api, delegateIP);\n    }\n    createWallet(sender, currency, amount, seed, weight) {\n        const kp = seed ? KeyPair.fromSeed(seed) : KeyPair.random();\n        const ks = new Keys([new PubKey(kp.publicKey, weight !== null && weight !== void 0 ? weight : 100)], weight !== null && weight !== void 0 ? weight : 100);\n        return {\n            wallet: {\n                privatekey: kp.privateKey.toString(),\n                publickey: kp.publicKey.toString(),\n                address: ks.address.toString(),\n            },\n            operation: new Operation(this.networkID, new CreateContractAccountFact(TimeStamp.new().UTC(), sender, [\n                new CreateContractAccountItem(ks, [new Amount(currency, amount)], \"mitum\")\n            ])),\n        };\n    }\n    createEtherWallet(sender, currency, amount, seed, weight) {\n        const kp = seed ? KeyPair.fromSeed(seed, \"ether\") : KeyPair.random(\"ether\");\n        const ks = new EtherKeys([new PubKey(kp.publicKey, weight !== null && weight !== void 0 ? weight : 100)], weight !== null && weight !== void 0 ? weight : 100);\n        return {\n            wallet: {\n                privatekey: kp.privateKey.toString(),\n                publickey: kp.publicKey.toString(),\n                address: new EtherKeys([new PubKey(kp.publicKey, 100)], 100).etherAddress.toString(),\n            },\n            operation: new Operation(this.networkID, new CreateContractAccountFact(TimeStamp.new().UTC(), sender, [\n                new CreateContractAccountItem(ks, [new Amount(currency, amount)], \"ether\")\n            ])),\n        };\n    }\n    createAccount(sender, key, currency, amount) {\n        return new Operation(this.networkID, new CreateContractAccountFact(TimeStamp.new().UTC(), sender, [\n            new CreateContractAccountItem(new Keys([new PubKey(key, 100)], 100), [new Amount(currency, amount)], \"mitum\")\n        ]));\n    }\n    createEtherAccount(sender, key, currency, amount) {\n        return new Operation(this.networkID, new CreateContractAccountFact(TimeStamp.new().UTC(), sender, [\n            new CreateContractAccountItem(new EtherKeys([new PubKey(key, 100)], 100), [new Amount(currency, amount)], \"ether\")\n        ]));\n    }\n    createMultiSig(sender, keys, currency, amount, threshold) {\n        return new Operation(this.networkID, new CreateContractAccountFact(TimeStamp.new().UTC(), sender, [\n            new CreateContractAccountItem(new Keys(keys.map(k => k instanceof PubKey ? k : new PubKey(k.key, k.weight)), threshold), [new Amount(currency, amount)], \"mitum\")\n        ]));\n    }\n    createEtherMultiSig(sender, keys, currency, amount, threshold) {\n        return new Operation(this.networkID, new CreateContractAccountFact(TimeStamp.new().UTC(), sender, [\n            new CreateContractAccountItem(new EtherKeys(keys.map(k => k instanceof PubKey ? k : new PubKey(k.key, k.weight)), threshold), [new Amount(currency, amount)], \"ether\")\n        ]));\n    }\n    updateOperator(sender, contract, currency, operators) {\n        return new Operation(this.networkID, new UpdateOperatorFact(TimeStamp.new().UTC(), sender, contract, currency, operators));\n    }\n    touch(privatekey, wallet) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const op = wallet.operation;\n            op.sign(privatekey);\n            return yield getAPIData(() => api.operation.send(this.api, op.toHintedObject(), this.delegateIP));\n        });\n    }\n    getContractInfo(address) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = yield getAPIData(() => api.account.getAccount(this.api, address, this.delegateIP));\n            return data ? data._embedded : null;\n        });\n    }\n}\n//# sourceMappingURL=index.js.map","references":["/Users/ohayoung/Projects/npm/mitumjs/src/operation/currency/create-account.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/currency/update-key.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/currency/transfer.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/currency/create-contract-account.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/currency/withdraw.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/currency/update-operator.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/currency/register-currency.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/currency/update-currency.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/currency/mint.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/currency/currency-design.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/base/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/api/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/common/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/types/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/key/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/error/index.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/operation/currency/index.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/ohayoung/Projects/npm/mitumjs/node_modules/.cache/rollup-plugin-typescript2/placeholder/operation/currency/index.d.ts","writeByteOrderMark":false,"text":"import { CreateAccountFact } from \"./create-account\";\nimport { UpdateKeyFact } from \"./update-key\";\nimport { TransferFact } from \"./transfer\";\nimport { CreateContractAccountFact } from \"./create-contract-account\";\nimport { WithdrawFact } from \"./withdraw\";\nimport { UpdateOperatorFact } from \"./update-operator\";\nimport { RegisterCurrencyFact } from \"./register-currency\";\nimport { UpdateCurrencyFact } from \"./update-currency\";\nimport { MintFact } from \"./mint\";\nimport { Operation } from \"../base\";\nimport { CurrencyID } from \"../../common\";\nimport { Big, Generator, IP } from \"../../types\";\nimport { Address, Key, PubKey, Account as AccountType, KeyG } from \"../../key\";\ntype createData = {\n    currency: string | CurrencyID;\n    genesisAddress: string | Address;\n    totalSupply: string | number | Big;\n    minBalance: string | number | Big;\n    feeType: \"nil\" | \"fixed\" | \"ratio\";\n    feeReceiver: string | Address;\n    fee?: string | number | Big;\n    ratio?: number;\n    minFee?: string | number | Big;\n    maxFee?: string | number | Big;\n};\ntype keysType = ({\n    key: string | Key | PubKey;\n    weight: string | number | Big;\n} | PubKey)[] | Array<{\n    key: string | Key | PubKey;\n    weight: string | number | Big;\n}>;\nexport declare class Currency extends Generator {\n    constructor(networkID: string, api?: string | IP, delegateIP?: string | IP);\n    create(data: createData): Operation<RegisterCurrencyFact>;\n    setPolicy(data: createData): Operation<UpdateCurrencyFact>;\n    private buildPolicy;\n    transfer(sender: string | Address, receiver: string | Address, currency: string | CurrencyID, amount: string | number | Big): Operation<TransferFact>;\n    withdraw(sender: string | Address, target: string | Address, currency: string | CurrencyID, amount: string | number | Big): Operation<WithdrawFact>;\n    mint(receiver: string | Address, currency: string | CurrencyID, amount: number): Operation<MintFact>;\n    getAllCurrencies(): Promise<string[] | null>;\n    getCurrency(cid: string | CurrencyID): Promise<any>;\n}\nexport declare class Account extends KeyG {\n    constructor(networkID: string, api?: string | IP, delegateIP?: string | IP);\n    createWallet(sender: string | Address, currency: string | CurrencyID, amount: string | number | Big, seed?: string, weight?: string | number | Big): {\n        wallet: AccountType;\n        operation: Operation<CreateAccountFact>;\n    };\n    createEtherWallet(sender: string | Address, currency: string | CurrencyID, amount: string | number | Big, seed?: string, weight?: string | number | Big): {\n        wallet: AccountType;\n        operation: Operation<CreateAccountFact>;\n    };\n    createBatchWallet(sender: string | Address, n: number, currency: string | CurrencyID, amount: string | number | Big): {\n        wallet: AccountType[];\n        operation: Operation<CreateAccountFact>;\n    };\n    createAccount(sender: string | Address, key: string | Key | PubKey, currency: string | CurrencyID, amount: string | number | Big): Operation<CreateAccountFact>;\n    createEtherAccount(sender: string | Address, key: string | Key | PubKey, currency: string | CurrencyID, amount: string | number | Big): Operation<CreateAccountFact>;\n    createMultiSig(sender: string | Address, keys: keysType, currency: string | CurrencyID, amount: string | number | Big, threshold: string | number | Big): Operation<CreateAccountFact>;\n    createEtherMultiSig(sender: string | Address, keys: keysType, currency: string | CurrencyID, amount: string | number | Big, threshold: string | number | Big): Operation<CreateAccountFact>;\n    update(target: string | Address, newKey: string | Key | PubKey, currency: string | CurrencyID): Operation<UpdateKeyFact>;\n    updateMultiSig(target: string | Address, newKeys: keysType, currency: string | CurrencyID, threshold: string | number | Big): Operation<UpdateKeyFact>;\n    getMultiSigAddress(keys: keysType, threshold: string | number | Big): string;\n    touch(privatekey: string | Key, wallet: {\n        wallet: AccountType;\n        operation: Operation<CreateAccountFact>;\n    }): Promise<any>;\n    getAccountInfo(address: string | Address): Promise<any>;\n    getOperations(address: string | Address): Promise<any>;\n    getByPublickey(publickey: string | Key | PubKey): Promise<any>;\n    balance(address: string | Address): Promise<any>;\n}\nexport declare class Contract extends Generator {\n    constructor(networkID: string, api?: string | IP, delegateIP?: string | IP);\n    createWallet(sender: string | Address, currency: string | CurrencyID, amount: string | number | Big, seed?: string, weight?: string | number | Big): {\n        wallet: AccountType;\n        operation: Operation<CreateContractAccountFact>;\n    };\n    createEtherWallet(sender: string | Address, currency: string | CurrencyID, amount: string | number | Big, seed?: string, weight?: string | number | Big): {\n        wallet: AccountType;\n        operation: Operation<CreateContractAccountFact>;\n    };\n    createAccount(sender: string | Address, key: string | Key | PubKey, currency: string | CurrencyID, amount: string | number | Big): Operation<CreateContractAccountFact>;\n    createEtherAccount(sender: string | Address, key: string | Key | PubKey, currency: string | CurrencyID, amount: string | number | Big): Operation<CreateContractAccountFact>;\n    createMultiSig(sender: string | Address, keys: keysType, currency: string | CurrencyID, amount: string | number | Big, threshold: string | number | Big): Operation<CreateContractAccountFact>;\n    createEtherMultiSig(sender: string | Address, keys: keysType, currency: string | CurrencyID, amount: string | number | Big, threshold: string | number | Big): Operation<CreateContractAccountFact>;\n    updateOperator(sender: string | Address, contract: string | Address, currency: string | CurrencyID, operators: (string | Address)[]): Operation<UpdateOperatorFact>;\n    touch(privatekey: string | Key, wallet: {\n        wallet: AccountType;\n        operation: Operation<CreateContractAccountFact>;\n    }): Promise<any>;\n    getContractInfo(address: string | Address): Promise<any>;\n}\nexport {};\n"}}
