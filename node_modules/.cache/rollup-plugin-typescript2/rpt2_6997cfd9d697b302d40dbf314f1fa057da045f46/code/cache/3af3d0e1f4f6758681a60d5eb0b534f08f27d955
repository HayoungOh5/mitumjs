{"code":"import base58 from \"bs58\";\n// import ethWallet from \"ethereumjs-wallet\"\nimport { Wallet } from \"ethers\";\nimport secureRandom from \"secure-random\";\nimport { getPublicCompressed } from \"eccrypto-js\";\nimport { hmac } from \"@noble/hashes/hmac\";\nimport { sha256 as nobleSha256 } from \"@noble/hashes/sha256\";\nimport * as secp256k1 from \"@noble/secp256k1\";\nimport * as crypto from \"crypto\";\nimport { ec as EC } from \"elliptic\";\nimport { Key } from \"./pub\";\nimport { Big } from \"../types\";\nimport { Config } from \"../node\";\nimport { SUFFIX } from \"../alias\";\nimport { sha3, sha256 } from \"../utils\";\nimport { Assert, ECODE, MitumError, StringAssert } from \"../error\";\nimport { privateKeyToPublicKey, compress } from \"../utils/converter\";\nexport class BaseKeyPair {\n    constructor(privateKey) {\n        this.privateKey = privateKey;\n        this.signer = this.getSigner();\n        this.publicKey = this.getPub();\n        secp256k1.utils.hmacSha256Sync = (key, ...msgs) => hmac(nobleSha256, key, secp256k1.utils.concatBytes(...msgs));\n        secp256k1.utils.sha256Sync = (...msgs) => nobleSha256(secp256k1.utils.concatBytes(...msgs));\n    }\n    static random(option) {\n        return this.generator.random(option);\n    }\n    static fromPrivateKey(key) {\n        return this.generator.fromPrivateKey(key);\n    }\n    static fromSeed(seed, option) {\n        return this.generator.fromSeed(seed, option);\n    }\n    btcSign(msg) {\n        return Buffer.from(secp256k1.signSync(sha256(sha256(msg)), this.signer));\n    }\n    ethSign(msg) {\n        const ec = new EC(\"secp256k1\");\n        const key = ec.keyFromPrivate(this.privateKey.noSuffix, \"hex\");\n        const msgHash = crypto.createHash(\"sha256\").update(msg).digest();\n        const signature = key.sign(msgHash);\n        const r = Buffer.from(signature.r.toArray());\n        const s = Buffer.from(signature.s.toArray());\n        const sigLength = 4 + r.length + s.length;\n        const sigBuffer = Buffer.alloc(sigLength);\n        sigBuffer.writeUInt32LE(r.length, 0);\n        sigBuffer.set(r, 4);\n        sigBuffer.set(s, 4 + r.length);\n        return sigBuffer;\n    }\n    btcVerify(sig, msg) {\n        if (typeof sig === \"string\") {\n            sig = Buffer.from(base58.decode(sig));\n        }\n        return secp256k1.verify(sig, sha256(sha256(msg)), secp256k1.getPublicKey(this.signer));\n    }\n    ethVerify(sig, msg) {\n        if (typeof sig === \"string\") {\n            sig = Buffer.from(base58.decode(sig));\n        }\n        const rlen = new Big(sig.subarray(0, 4).reverse());\n        const r = Buffer.alloc(rlen.v);\n        const rb = new Big(sig.subarray(4, 4 + rlen.v));\n        rb.toBuffer().copy(r, rlen.v - rb.byteLen());\n        const s = sig.subarray(4 + rlen.v);\n        const slen = new Big(s.length);\n        const base = Buffer.from([48, sig.length, 2]);\n        const buf = Buffer.alloc(sig.length + 2);\n        base.copy(buf, 0, 0, 4);\n        rlen.toBuffer().copy(buf, 3);\n        r.copy(buf, 4);\n        Buffer.from([2]).copy(buf, 4 + rlen.v);\n        slen.toBuffer().copy(buf, 5 + rlen.v);\n        s.copy(buf, 6 + rlen.v);\n        return secp256k1.verify(buf, sha256(msg), secp256k1.getPublicKey(this.signer, true));\n    }\n    static K(seed) {\n        seed = Buffer.from(base58.encode(sha3(Buffer.from(seed))));\n        Assert.check(40 <= seed.length, MitumError.detail(ECODE.INVALID_SEED, \"seed length out of range\"));\n        seed = seed.subarray(0, 40);\n        const N = secp256k1.CURVE.n - BigInt(1);\n        let k = new Big(seed).big;\n        k %= N;\n        k += BigInt(1);\n        return k;\n    }\n}\nexport class KeyPair extends BaseKeyPair {\n    constructor(privateKey) {\n        super(Key.from(privateKey));\n    }\n    getSigner() {\n        if (this.privateKey.type === \"btc\") {\n            return Buffer.from(base58.decode(this.privateKey.noSuffix));\n        }\n        return Buffer.from(this.privateKey.noSuffix, \"hex\");\n    }\n    getPub() {\n        if (this.privateKey.type === \"btc\") {\n            return new Key(base58.encode(getPublicCompressed(Buffer.from(this.signer))) + SUFFIX.KEY.MITUM.PUBLIC);\n        }\n        const publickeyBuffer = privateKeyToPublicKey(\"0x\" + this.privateKey.noSuffix);\n        return new Key(compress(publickeyBuffer) + SUFFIX.KEY.ETHER.PUBLIC);\n    }\n    sign(msg) {\n        if (this.privateKey.type === \"btc\") {\n            return this.btcSign(msg);\n        }\n        return this.ethSign(msg);\n    }\n    verify(sig, msg) {\n        if (this.privateKey.type === \"btc\") {\n            return this.btcVerify(sig, msg);\n        }\n        return this.ethVerify(sig, msg);\n    }\n}\nKeyPair.generator = {\n    random(option) {\n        option = option !== null && option !== void 0 ? option : \"btc\";\n        if (option === \"btc\") {\n            return new KeyPair(base58.encode(Buffer.from(secureRandom(32, { type: \"Uint8Array\" }))) + SUFFIX.KEY.MITUM.PRIVATE);\n        }\n        //return new KeyPair(ethWallet.generate().getPrivateKeyString().substring(2) + SUFFIX.KEY.ETHER.PRIVATE)\n        return new KeyPair(Wallet.createRandom().privateKey.substring(2) + SUFFIX.KEY.ETHER.PRIVATE);\n    },\n    fromPrivateKey(key) {\n        return new KeyPair(key);\n    },\n    fromSeed(seed, option) {\n        option = option !== null && option !== void 0 ? option : \"btc\";\n        StringAssert.with(seed, MitumError.detail(ECODE.INVALID_SEED, \"seed length out of range\"))\n            .satisfyConfig(Config.SEED)\n            .excute();\n        if (option === \"btc\") {\n            return new KeyPair(base58.encode(secp256k1.utils.hexToBytes(BaseKeyPair.K(seed).toString(16))) + SUFFIX.KEY.MITUM.PRIVATE);\n        }\n        return new KeyPair(BaseKeyPair.K(seed).toString(16) + SUFFIX.KEY.ETHER.PRIVATE);\n    }\n};\n//# sourceMappingURL=keypair.js.map","references":["/Users/ohayoung/Projects/npm/mitumjs/node_modules/bs58/index.d.ts","/Users/ohayoung/Projects/npm/mitumjs/node_modules/ethers/lib.commonjs/index.d.ts","/Users/ohayoung/Projects/npm/mitumjs/node_modules/@types/secure-random/index.d.ts","/Users/ohayoung/Projects/npm/mitumjs/node_modules/eccrypto-js/dist/cjs/index.d.ts","/Users/ohayoung/Projects/npm/mitumjs/node_modules/@noble/hashes/hmac.d.ts","/Users/ohayoung/Projects/npm/mitumjs/node_modules/@noble/hashes/sha256.d.ts","/Users/ohayoung/Projects/npm/mitumjs/node_modules/@noble/secp256k1/lib/index.d.ts","/Users/ohayoung/Projects/npm/mitumjs/node_modules/@types/elliptic/index.d.ts","/Users/ohayoung/Projects/npm/mitumjs/src/key/pub.ts","/Users/ohayoung/Projects/npm/mitumjs/src/key/types.ts","/Users/ohayoung/Projects/npm/mitumjs/src/types/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/node/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/alias/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/utils/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/error/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/utils/converter.ts"],"map":"{\"version\":3,\"file\":\"keypair.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/key/keypair.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/ohayoung/Projects/npm/mitumjs/node_modules/.cache/rollup-plugin-typescript2/placeholder/key/keypair.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"node\" />\nimport { Key } from \"./pub\";\nimport { KeyPairType } from \"./types\";\ninterface IKeyGenerator {\n    random(option?: KeyPairType): BaseKeyPair;\n    fromPrivateKey(key: string | Key): BaseKeyPair;\n    fromSeed(seed: string | Buffer | Uint8Array, option?: KeyPairType): BaseKeyPair;\n}\nexport declare abstract class BaseKeyPair {\n    readonly privateKey: Key;\n    readonly publicKey: Key;\n    protected signer: Uint8Array;\n    protected static generator: IKeyGenerator;\n    protected constructor(privateKey: Key);\n    abstract sign(msg: string | Buffer): Buffer;\n    abstract verify(sig: string | Buffer, msg: string | Buffer): boolean;\n    protected abstract getSigner(): Uint8Array;\n    protected abstract getPub(): Key;\n    static random<T extends BaseKeyPair>(option?: KeyPairType): T;\n    static fromPrivateKey<T extends BaseKeyPair>(key: string | Key): T;\n    static fromSeed<T extends BaseKeyPair>(seed: string | Buffer | Uint8Array, option?: KeyPairType): T;\n    protected btcSign(msg: string | Buffer): Buffer;\n    protected ethSign(msg: string | Buffer): Buffer;\n    protected btcVerify(sig: string | Buffer, msg: string | Buffer): boolean;\n    protected ethVerify(sig: string | Buffer, msg: string | Buffer): boolean;\n    protected static K(seed: string | Buffer | Uint8Array): bigint;\n}\nexport declare class KeyPair extends BaseKeyPair {\n    static generator: {\n        random(option?: KeyPairType): KeyPair;\n        fromPrivateKey(key: string | Key): KeyPair;\n        fromSeed(seed: string, option?: KeyPairType): KeyPair;\n    };\n    private constructor();\n    protected getSigner(): Uint8Array;\n    protected getPub(): Key;\n    sign(msg: string | Buffer): Buffer;\n    verify(sig: string | Buffer, msg: string | Buffer): boolean;\n}\nexport {};\n"}}
