{"code":"import { __awaiter } from \"tslib\";\nimport { CreateDAOFact } from \"./create-dao\";\nimport { ProposeFact } from \"./propose\";\nimport { CancelProposalFact } from \"./cancel-proposal\";\nimport { RegisterFact } from \"./register\";\nimport { PreSnapFact } from \"./pre-snap\";\nimport { PostSnapFact } from \"./post-snap\";\nimport { VoteFact } from \"./vote\";\nimport { ExecuteFact } from \"./execute\";\nimport { DAOPolicy } from \"./policy\";\nimport { Whitelist } from \"./whitelist\";\nimport { CryptoProposal, BizProposal } from \"./proposal\";\nimport { TransferCalldata, GovernanceCalldata } from \"./proposal\";\nimport { ContractGenerator, Operation } from \"../base\";\nimport { Address } from \"../../key\";\nimport { Amount } from \"../../common\";\nimport { contract, getAPIData } from \"../../api\";\nimport { TimeStamp, URIString } from \"../../types\";\nimport { UpdatePolicyFact } from \"./update-policy\";\nimport { Assert, ECODE, MitumError } from \"../../error\";\nexport class DAO extends ContractGenerator {\n    constructor(networkID, api, delegateIP) {\n        super(networkID, api, delegateIP);\n    }\n    createService(contractAddr, sender, data, currency) {\n        const keysToCheck = ['option', 'token', 'threshold', 'fee', 'proposers', 'proposalReviewPeriod', 'registrationPeriod', 'preSnapshotPeriod', 'votingPeriod', 'postSnapshotPeriod', 'executionDelayPeriod', 'turnout', 'quorum'];\n        keysToCheck.forEach((key) => {\n            Assert.check(data[key] !== undefined, MitumError.detail(ECODE.INVALID_DATA_STRUCTURE, `${key} is undefined, check the daoData structure`));\n        });\n        return new Operation(this.networkID, new CreateDAOFact(TimeStamp.new().UTC(), sender, contractAddr, data.option, data.token, data.threshold, new Amount(currency, data.fee), new Whitelist(true, data.proposers.map(a => Address.from(a))), data.proposalReviewPeriod, data.registrationPeriod, data.preSnapshotPeriod, data.votingPeriod, data.postSnapshotPeriod, data.executionDelayPeriod, data.turnout, data.quorum, currency));\n    }\n    updateService(contractAddr, sender, data, currency) {\n        const keysToCheck = ['option', 'token', 'threshold', 'fee', 'proposers', 'proposalReviewPeriod', 'registrationPeriod', 'preSnapshotPeriod', 'votingPeriod', 'postSnapshotPeriod', 'executionDelayPeriod', 'turnout', 'quorum'];\n        keysToCheck.forEach((key) => {\n            Assert.check(data[key] !== undefined, MitumError.detail(ECODE.INVALID_DATA_STRUCTURE, `${key} is undefined, check the daoData structure`));\n        });\n        return new Operation(this.networkID, new UpdatePolicyFact(TimeStamp.new().UTC(), sender, contractAddr, data.option, data.token, data.threshold, new Amount(currency, data.fee), new Whitelist(true, data.proposers.map(a => Address.from(a))), data.proposalReviewPeriod, data.registrationPeriod, data.preSnapshotPeriod, data.votingPeriod, data.postSnapshotPeriod, data.executionDelayPeriod, data.turnout, data.quorum, currency));\n    }\n    formTransferCalldata(sender, receiver, currency, amount) {\n        return new TransferCalldata(sender, receiver, new Amount(currency, amount));\n    }\n    formSetPolicyCalldata(data, currency) {\n        const keysToCheck = ['token', 'threshold', 'fee', 'proposers', 'proposalReviewPeriod', 'registrationPeriod', 'preSnapshotPeriod', 'votingPeriod', 'postSnapshotPeriod', 'executionDelayPeriod', 'turnout', 'quorum'];\n        keysToCheck.forEach((key) => {\n            Assert.check(data[key] !== undefined, MitumError.detail(ECODE.INVALID_DATA_STRUCTURE, `${key} is undefined, check the policyData structure`));\n        });\n        return new GovernanceCalldata(new DAOPolicy(data.token, data.threshold, new Amount(currency, data.fee), new Whitelist(true, data.proposers.map(a => Address.from(a))), data.proposalReviewPeriod, data.registrationPeriod, data.preSnapshotPeriod, data.votingPeriod, data.postSnapshotPeriod, data.executionDelayPeriod, data.turnout, data.quorum));\n    }\n    writeCryptoProposal(proposer, startTime, calldata) {\n        return new CryptoProposal(proposer, startTime, calldata);\n    }\n    writeBizProposal(proposer, startTime, url, hash, options) {\n        return new BizProposal(proposer, startTime, url, hash, options);\n    }\n    propose(contractAddr, sender, proposalID, proposal, currency) {\n        new URIString(proposalID, 'proposalID');\n        return new Operation(this.networkID, new ProposeFact(TimeStamp.new().UTC(), sender, contractAddr, proposalID, proposal, currency));\n    }\n    register(contractAddr, sender, proposalID, currency, delegator) {\n        return new Operation(this.networkID, new RegisterFact(TimeStamp.new().UTC(), sender, contractAddr, proposalID, delegator ? delegator : sender, currency));\n    }\n    cancel(contractAddr, sender, proposalID, currency) {\n        return new Operation(this.networkID, new CancelProposalFact(TimeStamp.new().UTC(), sender, contractAddr, proposalID, currency));\n    }\n    snapBeforeVoting(contractAddr, sender, proposalID, currency) {\n        return new Operation(this.networkID, new PreSnapFact(TimeStamp.new().UTC(), sender, contractAddr, proposalID, currency));\n    }\n    castVote(contractAddr, sender, proposalID, voteOption, currency) {\n        return new Operation(this.networkID, new VoteFact(TimeStamp.new().UTC(), sender, contractAddr, proposalID, voteOption, currency));\n    }\n    snapAfterVoting(contractAddr, sender, proposalID, currency) {\n        return new Operation(this.networkID, new PostSnapFact(TimeStamp.new().UTC(), sender, contractAddr, proposalID, currency));\n    }\n    execute(contractAddr, sender, proposalID, currency) {\n        return new Operation(this.networkID, new ExecuteFact(TimeStamp.new().UTC(), sender, contractAddr, proposalID, currency));\n    }\n    getServiceInfo(contractAddr) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield getAPIData(() => contract.dao.getService(this.api, contractAddr, this.delegateIP));\n        });\n    }\n    getProposalInfo(contractAddr, proposalID) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield getAPIData(() => contract.dao.getProposal(this.api, contractAddr, proposalID, this.delegateIP));\n        });\n    }\n    getDelegatorInfo(contractAddr, proposalID, delegator) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield getAPIData(() => contract.dao.getDelegator(this.api, contractAddr, proposalID, delegator, this.delegateIP));\n        });\n    }\n    getVoterInfo(contractAddr, proposalID) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield getAPIData(() => contract.dao.getVoter(this.api, contractAddr, proposalID, this.delegateIP));\n        });\n    }\n    getVotingResult(contractAddr, proposalID) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield getAPIData(() => contract.dao.getVotingResult(this.api, contractAddr, proposalID, this.delegateIP));\n        });\n    }\n}\n//# sourceMappingURL=index.js.map","references":["/Users/ohayoung/Projects/npm/mitumjs/src/operation/dao/create-dao.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/dao/propose.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/dao/cancel-proposal.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/dao/register.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/dao/pre-snap.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/dao/post-snap.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/dao/vote.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/dao/execute.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/dao/policy.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/dao/whitelist.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/dao/proposal.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/dao/proposal.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/base/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/key/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/common/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/api/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/types/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/dao/update-policy.ts","/Users/ohayoung/Projects/npm/mitumjs/src/error/index.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/operation/dao/index.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/ohayoung/Projects/npm/mitumjs/node_modules/.cache/rollup-plugin-typescript2/placeholder/operation/dao/index.d.ts","writeByteOrderMark":false,"text":"import { CreateDAOFact } from \"./create-dao\";\nimport { ProposeFact } from \"./propose\";\nimport { CancelProposalFact } from \"./cancel-proposal\";\nimport { RegisterFact } from \"./register\";\nimport { PreSnapFact } from \"./pre-snap\";\nimport { PostSnapFact } from \"./post-snap\";\nimport { VoteFact } from \"./vote\";\nimport { ExecuteFact } from \"./execute\";\nimport { CryptoProposal, BizProposal } from \"./proposal\";\nimport { TransferCalldata, GovernanceCalldata } from \"./proposal\";\nimport { ContractGenerator, Operation } from \"../base\";\nimport { Address } from \"../../key\";\nimport { CurrencyID } from \"../../common\";\nimport { Big, IP, LongString } from \"../../types\";\nimport { UpdatePolicyFact } from \"./update-policy\";\ntype policyData = {\n    token: string | CurrencyID;\n    threshold: string | number | Big;\n    fee: string | number | Big;\n    proposers: (string | Address)[];\n    proposalReviewPeriod: string | number | Big;\n    registrationPeriod: string | number | Big;\n    preSnapshotPeriod: string | number | Big;\n    votingPeriod: string | number | Big;\n    postSnapshotPeriod: string | number | Big;\n    executionDelayPeriod: string | number | Big;\n    turnout: string | number | Big;\n    quorum: string | number | Big;\n};\ntype daoData = policyData & {\n    option: \"crypto\" | \"biz\";\n};\nexport declare class DAO extends ContractGenerator {\n    constructor(networkID: string, api?: string | IP, delegateIP?: string | IP);\n    createService(contractAddr: string | Address, sender: string | Address, data: daoData, currency: string | CurrencyID): Operation<CreateDAOFact>;\n    updateService(contractAddr: string | Address, sender: string | Address, data: daoData, currency: string | CurrencyID): Operation<UpdatePolicyFact>;\n    formTransferCalldata(sender: string | Address, receiver: string | Address, currency: string | CurrencyID, amount: string | number | Big): TransferCalldata;\n    formSetPolicyCalldata(data: policyData, currency: string | CurrencyID): GovernanceCalldata;\n    writeCryptoProposal(proposer: string, startTime: number, calldata: TransferCalldata | GovernanceCalldata): CryptoProposal;\n    writeBizProposal(proposer: string | Address, startTime: string | number | Big, url: string | LongString, hash: string | LongString, options: string | number | Big): BizProposal;\n    propose(contractAddr: string | Address, sender: string | Address, proposalID: string, proposal: CryptoProposal | BizProposal, currency: string | CurrencyID): Operation<ProposeFact>;\n    register(contractAddr: string | Address, sender: string | Address, proposalID: string, currency: string | CurrencyID, delegator?: string | Address): Operation<RegisterFact>;\n    cancel(contractAddr: string | Address, sender: string | Address, proposalID: string, currency: string | CurrencyID): Operation<CancelProposalFact>;\n    snapBeforeVoting(contractAddr: string | Address, sender: string | Address, proposalID: string, currency: string | CurrencyID): Operation<PreSnapFact>;\n    castVote(contractAddr: string | Address, sender: string | Address, proposalID: string, voteOption: number, currency: string | CurrencyID): Operation<VoteFact>;\n    snapAfterVoting(contractAddr: string | Address, sender: string | Address, proposalID: string, currency: string | CurrencyID): Operation<PostSnapFact>;\n    execute(contractAddr: string | Address, sender: string | Address, proposalID: string, currency: string | CurrencyID): Operation<ExecuteFact>;\n    getServiceInfo(contractAddr: string | Address): Promise<any>;\n    getProposalInfo(contractAddr: string | Address, proposalID: string): Promise<any>;\n    getDelegatorInfo(contractAddr: string | Address, proposalID: string, delegator: string | Address): Promise<any>;\n    getVoterInfo(contractAddr: string | Address, proposalID: string): Promise<any>;\n    getVotingResult(contractAddr: string | Address, proposalID: string): Promise<any>;\n}\nexport {};\n"}}
