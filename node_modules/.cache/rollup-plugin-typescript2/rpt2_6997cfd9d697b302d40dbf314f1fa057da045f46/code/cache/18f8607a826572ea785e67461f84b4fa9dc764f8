{"code":"import { __awaiter } from \"tslib\";\nimport { RegisterPointFact } from \"./register-point\";\nimport { MintFact } from \"./mint\";\nimport { BurnFact } from \"./burn\";\nimport { TransferFact } from \"./transfer\";\nimport { ApproveFact } from \"./approve\";\nimport { TransferFromFact } from \"./transfer-from\";\nimport { ContractGenerator, Operation } from \"../base\";\nimport { contract, getAPIData } from \"../../api\";\nimport { TimeStamp } from \"../../types\";\nexport class Point extends ContractGenerator {\n    constructor(networkID, api, delegateIP) {\n        super(networkID, api, delegateIP);\n    }\n    registerPoint(contractAddr, sender, currency, name, symbol, initialSupply) {\n        return new Operation(this.networkID, new RegisterPointFact(TimeStamp.new().UTC(), sender, contractAddr, currency, symbol, name, initialSupply !== null && initialSupply !== void 0 ? initialSupply : 0));\n    }\n    mint(contractAddr, sender, currency, receiver, amount) {\n        return new Operation(this.networkID, new MintFact(TimeStamp.new().UTC(), sender, contractAddr, currency, receiver, amount));\n    }\n    burn(contractAddr, sender, currency, target, amount) {\n        return new Operation(this.networkID, new BurnFact(TimeStamp.new().UTC(), sender, contractAddr, currency, target, amount));\n    }\n    transfer(contractAddr, sender, currency, receiver, amount) {\n        return new Operation(this.networkID, new TransferFact(TimeStamp.new().UTC(), sender, contractAddr, currency, receiver, amount));\n    }\n    transferFrom(contractAddr, sender, currency, receiver, target, amount) {\n        return new Operation(this.networkID, new TransferFromFact(TimeStamp.new().UTC(), sender, contractAddr, currency, receiver, target, amount));\n    }\n    approve(contractAddr, sender, currency, approved, amount) {\n        return new Operation(this.networkID, new ApproveFact(TimeStamp.new().UTC(), sender, contractAddr, currency, approved, amount));\n    }\n    getPointInfo(contractAddr) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = yield getAPIData(() => contract.point.getPoint(this.api, contractAddr, this.delegateIP));\n            return data ? data._embedded : null;\n        });\n    }\n    getAllowance(contractAddr, owner, spender) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = yield getAPIData(() => contract.point.getPoint(this.api, contractAddr, this.delegateIP));\n            if (data) {\n                const approve_list = data._embedded.policy.approve_list;\n                let amount;\n                for (let i = 0; i < approve_list.length; i++) {\n                    if (approve_list[i].account === owner) {\n                        const approved = approve_list[i].approved;\n                        for (let j = 0; j < approved.length; j++) {\n                            if (approved[j].account === spender) {\n                                amount = {\n                                    'amount': approved[j].amount\n                                };\n                            }\n                        }\n                    }\n                }\n                return amount;\n            }\n            else {\n                return null;\n            }\n        });\n    }\n    getPointBalance(contractAddr, owner) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = yield getAPIData(() => contract.point.getPointBalance(this.api, contractAddr, owner, this.delegateIP));\n            return data ? data._embedded : null;\n        });\n    }\n}\n//# sourceMappingURL=index.js.map","references":["/Users/ohayoung/Projects/npm/mitumjs/src/operation/point/register-point.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/point/mint.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/point/burn.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/point/transfer.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/point/approve.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/point/transfer-from.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/base/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/key/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/common/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/api/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/types/index.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/operation/point/index.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/ohayoung/Projects/npm/mitumjs/node_modules/.cache/rollup-plugin-typescript2/placeholder/operation/point/index.d.ts","writeByteOrderMark":false,"text":"import { RegisterPointFact } from \"./register-point\";\nimport { MintFact } from \"./mint\";\nimport { BurnFact } from \"./burn\";\nimport { TransferFact } from \"./transfer\";\nimport { ApproveFact } from \"./approve\";\nimport { TransferFromFact } from \"./transfer-from\";\nimport { ContractGenerator, Operation } from \"../base\";\nimport { Address } from \"../../key\";\nimport { CurrencyID } from \"../../common\";\nimport { Big, IP, LongString } from \"../../types\";\nexport declare class Point extends ContractGenerator {\n    constructor(networkID: string, api?: string | IP, delegateIP?: string | IP);\n    registerPoint(contractAddr: string | Address, sender: string | Address, currency: string | CurrencyID, name: string | LongString, symbol: string | CurrencyID, initialSupply?: string | number | Big): Operation<RegisterPointFact>;\n    mint(contractAddr: string | Address, sender: string | Address, currency: string | CurrencyID, receiver: string | Address, amount: string | number | Big): Operation<MintFact>;\n    burn(contractAddr: string | Address, sender: string | Address, currency: string | CurrencyID, target: string | Address, amount: string | number | Big): Operation<BurnFact>;\n    transfer(contractAddr: string | Address, sender: string | Address, currency: string | CurrencyID, receiver: string | Address, amount: string | number | Big): Operation<TransferFact>;\n    transferFrom(contractAddr: string | Address, sender: string | Address, currency: string | CurrencyID, receiver: string | Address, target: string | Address, amount: string | number | Big): Operation<TransferFromFact>;\n    approve(contractAddr: string | Address, sender: string | Address, currency: string | CurrencyID, approved: string | Address, amount: string | number | Big): Operation<ApproveFact>;\n    getPointInfo(contractAddr: string | Address): Promise<any>;\n    getAllowance(contractAddr: string | Address, owner: string | Address, spender: string | Address): Promise<{\n        amount: any;\n    } | null | undefined>;\n    getPointBalance(contractAddr: string | Address, owner: string | Address): Promise<any>;\n}\n"}}
