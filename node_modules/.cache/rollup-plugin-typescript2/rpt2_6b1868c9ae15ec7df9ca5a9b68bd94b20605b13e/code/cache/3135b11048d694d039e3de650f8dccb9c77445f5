{"code":"import { HINT } from \"../../alias\";\nimport { Hint } from \"../../common\";\nimport { Config } from \"../../node\";\nimport { Address } from \"../../key\";\nimport { Assert, ECODE, MitumError } from \"../../error\";\nimport { SortFunc, hasOverlappingAddress } from \"../../utils\";\nimport { Bool } from \"../../types\";\nexport class Whitelist {\n    constructor(active, accounts) {\n        this.hint = new Hint(HINT.DAO.WHITELIST);\n        this.active = Bool.from(active);\n        this.accounts = accounts ? accounts.map(a => Address.from(a)) : [];\n        Assert.check(Config.DAO.ADDRESS_IN_WHITELIST.satisfy(accounts.length), MitumError.detail(ECODE.DAO.INVALID_WHITELIST, \"whitelist length out of range\"));\n        Assert.check(hasOverlappingAddress(accounts), MitumError.detail(ECODE.DAO.INVALID_WHITELIST, \"duplicate account found in whitelist\"));\n    }\n    toBuffer() {\n        return Buffer.concat([\n            this.active.toBuffer(),\n            Buffer.concat(this.accounts.sort(SortFunc).map(a => a.toBuffer())),\n        ]);\n    }\n    toHintedObject() {\n        return {\n            _hint: this.hint.toString(),\n            active: this.active.v,\n            accounts: this.accounts.sort(SortFunc).map(a => a.toString()),\n        };\n    }\n}\n//# sourceMappingURL=whitelist.js.map","references":["/Users/ohayoung/Projects/npm/mitumjs/src/alias/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/common/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/node/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/key/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/error/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/utils/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/types/index.ts"],"map":"{\"version\":3,\"file\":\"whitelist.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/operation/dao/whitelist.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,aAAa,CAAA;AAClC,OAAO,EAAE,IAAI,EAAE,MAAM,cAAc,CAAA;AACnC,OAAO,EAAE,MAAM,EAAE,MAAM,YAAY,CAAA;AACnC,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAA;AACnC,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,MAAM,aAAa,CAAA;AACvD,OAAO,EAAE,QAAQ,EAAE,qBAAqB,EAAE,MAAM,aAAa,CAAA;AAC7D,OAAO,EAAE,IAAI,EAAwC,MAAM,aAAa,CAAA;AAExE,MAAM,OAAO,SAAS;IAKlB,YAAY,MAAsB,EAAE,QAA8B;QAC9D,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAA;QACxC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QAC/B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAA;QAElE,MAAM,CAAC,KAAK,CACR,MAAM,CAAC,GAAG,CAAC,oBAAoB,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,EACxD,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,iBAAiB,EAAE,+BAA+B,CAAC,CAClF,CAAA;QAED,MAAM,CAAC,KAAK,CACR,qBAAqB,CAAC,QAAQ,CAAC,EAC/B,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,iBAAiB,EAAE,sCAAsC,CAAC,CACzF,CAAA;IACL,CAAC;IAED,QAAQ;QACJ,OAAO,MAAM,CAAC,MAAM,CAAC;YACjB,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;YACtB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;SACrE,CAAC,CAAA;IACN,CAAC;IAED,cAAc;QACV,OAAO;YACH,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAC3B,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YACrB,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;SAChE,CAAA;IACL,CAAC;CACJ\"}","dts":{"name":"/Users/ohayoung/Projects/npm/mitumjs/node_modules/.cache/rollup-plugin-typescript2/placeholder/operation/dao/whitelist.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"node\" />\nimport { Address } from \"../../key\";\nimport { Bool, HintedObject, IBuffer, IHintedObject } from \"../../types\";\nexport declare class Whitelist implements IBuffer, IHintedObject {\n    private hint;\n    readonly active: Bool;\n    readonly accounts: Address[];\n    constructor(active: boolean | Bool, accounts: (string | Address)[]);\n    toBuffer(): Buffer;\n    toHintedObject(): HintedObject;\n}\n"}}
