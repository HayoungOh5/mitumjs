{"code":"import base58 from \"bs58\";\nimport { CurrencyItem } from \"./item\";\nimport { OperationFact } from \"../base\";\nimport { SortFunc } from \"../../utils\";\nimport { HINT, SUFFIX } from \"../../alias\";\nimport { Assert, ECODE, MitumError } from \"../../error\";\nexport class CreateAccountItem extends CurrencyItem {\n    constructor(keys, amounts, addressType) {\n        super(HINT.CURRENCY.CREATE_ACCOUNT.ITEM, amounts, addressType);\n        this.keys = keys;\n        if (addressType === \"mitum\") {\n            this.addressSuffix = SUFFIX.ADDRESS.MITUM;\n        }\n        else {\n            this.addressSuffix = SUFFIX.ADDRESS.ETHER;\n        }\n    }\n    toBuffer() {\n        return Buffer.concat([\n            this.keys.toBuffer(),\n            Buffer.from(this.addressSuffix),\n            Buffer.concat(this.amounts.sort(SortFunc).map(am => am.toBuffer())),\n        ]);\n    }\n    toHintedObject() {\n        return Object.assign(Object.assign({}, super.toHintedObject()), { keys: this.keys.toHintedObject(), addrtype: this.addressSuffix });\n    }\n    toString() {\n        return base58.encode(this.keys.toBuffer());\n    }\n}\nexport class CreateAccountFact extends OperationFact {\n    constructor(token, sender, items) {\n        super(HINT.CURRENCY.CREATE_ACCOUNT.FACT, token, sender, items);\n        Assert.check(new Set(items.map(it => it.toString())).size === items.length, MitumError.detail(ECODE.INVALID_ITEMS, \"duplicate key hash found in items\"));\n    }\n    get operationHint() {\n        return HINT.CURRENCY.CREATE_ACCOUNT.OPERATION;\n    }\n}\n//# sourceMappingURL=create-account.js.map","references":["/Users/ohayoung/Projects/npm/mitumjs/node_modules/bs58/index.d.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/currency/item.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/base/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/common/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/utils/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/alias/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/types/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/key/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/error/index.ts"],"map":"{\"version\":3,\"file\":\"create-account.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/operation/currency/create-account.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,MAAM,MAAM,MAAM,CAAA;AAEzB,OAAO,EAAE,YAAY,EAAE,MAAM,QAAQ,CAAA;AACrC,OAAO,EAAE,aAAa,EAAE,MAAM,SAAS,CAAA;AAGvC,OAAO,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAA;AACtC,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,aAAa,CAAA;AAG1C,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,MAAM,aAAa,CAAA;AAEvD,MAAM,OAAO,iBAAkB,SAAQ,YAAY;IAI/C,YAAY,IAAsB,EAAE,OAAiB,EAAE,WAAwB;QAC3E,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,EAAE,OAAO,EAAE,WAAW,CAAC,CAAA;QAC9D,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;QAEhB,IAAI,WAAW,KAAK,OAAO,EAAE;YACzB,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,CAAA;SAC5C;aAAM;YACH,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,CAAA;SAC5C;IACL,CAAC;IAED,QAAQ;QACJ,OAAO,MAAM,CAAC,MAAM,CAAC;YACjB,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YACpB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC;YAC/B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC;SACtE,CAAC,CAAA;IACN,CAAC;IAED,cAAc;QACV,uCACO,KAAK,CAAC,cAAc,EAAE,KACzB,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,EAChC,QAAQ,EAAE,IAAI,CAAC,aAAa,IAC/B;IACL,CAAC;IAED,QAAQ;QACJ,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAA;IAC9C,CAAC;CACJ;AAED,MAAM,OAAO,iBAAkB,SAAQ,aAAgC;IACnE,YAAY,KAAa,EAAE,MAAwB,EAAE,KAA0B;QAC3E,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,CAAC,CAAA;QAE9D,MAAM,CAAC,KAAK,CACR,IAAI,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,KAAK,CAAC,MAAM,EAC7D,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,aAAa,EAAE,mCAAmC,CAAC,CAC9E,CAAA;IACL,CAAC;IAED,IAAI,aAAa;QACb,OAAO,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,SAAS,CAAA;IACjD,CAAC;CACJ\"}","dts":{"name":"/Users/ohayoung/Projects/npm/mitumjs/node_modules/.cache/rollup-plugin-typescript2/placeholder/operation/currency/create-account.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"node\" />\nimport { CurrencyItem } from \"./item\";\nimport { OperationFact } from \"../base\";\nimport { Amount } from \"../../common\";\nimport { HintedObject } from \"../../types\";\nimport { Keys, EtherKeys, Address, AddressType } from \"../../key\";\nexport declare class CreateAccountItem extends CurrencyItem {\n    readonly keys: Keys | EtherKeys;\n    private addressSuffix;\n    constructor(keys: Keys | EtherKeys, amounts: Amount[], addressType: AddressType);\n    toBuffer(): Buffer;\n    toHintedObject(): HintedObject;\n    toString(): string;\n}\nexport declare class CreateAccountFact extends OperationFact<CreateAccountItem> {\n    constructor(token: string, sender: string | Address, items: CreateAccountItem[]);\n    get operationHint(): string;\n}\n"}}
