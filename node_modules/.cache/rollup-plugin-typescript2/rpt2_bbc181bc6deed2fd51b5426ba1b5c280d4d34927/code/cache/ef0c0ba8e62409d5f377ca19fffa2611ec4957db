{"code":"import { STOItem } from \"./item\";\nimport { Partition } from \"./partition\";\nimport { OperationFact } from \"../base\";\nimport { HINT } from \"../../alias\";\nimport { Address } from \"../../key\";\nimport { Assert, ECODE, MitumError } from \"../../error\";\nexport class RevokeOperatorItem extends STOItem {\n    constructor(contract, operator, partition, currency) {\n        super(HINT.STO.REVOKE_OPERATOR.ITEM, contract, currency);\n        this.operator = Address.from(operator);\n        this.partition = Partition.from(partition);\n        Assert.check(this.contract.toString() !== this.operator.toString(), MitumError.detail(ECODE.INVALID_ITEM, \"contract is same with operator address\"));\n    }\n    toBuffer() {\n        return Buffer.concat([\n            super.toBuffer(),\n            this.operator.toBuffer(),\n            this.partition.toBuffer(),\n            this.currency.toBuffer(),\n        ]);\n    }\n    toHintedObject() {\n        return {\n            ...super.toHintedObject(),\n            operator: this.operator.toString(),\n            partition: this.partition.toString(),\n        };\n    }\n    toString() {\n        return this.operator.toString();\n    }\n}\nexport class RevokeOperatorFact extends OperationFact {\n    constructor(token, sender, items) {\n        super(HINT.STO.REVOKE_OPERATOR.FACT, token, sender, items);\n        Assert.check(new Set(items.map(it => it.toString())).size === items.length, MitumError.detail(ECODE.INVALID_ITEMS, \"duplicate operator found in items\"));\n    }\n    get operationHint() {\n        return HINT.STO.REVOKE_OPERATOR.OPERATION;\n    }\n}\n//# sourceMappingURL=revoke-operator.js.map","references":["/Users/ohayoung/Projects/npm/mitumjs/src/operation/sto/item.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/sto/partition.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/base/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/alias/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/key/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/common/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/types/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/error/index.ts"],"map":"{\"version\":3,\"file\":\"revoke-operator.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/operation/sto/revoke-operator.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,QAAQ,CAAA;AAChC,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAA;AACvC,OAAO,EAAE,aAAa,EAAE,MAAM,SAAS,CAAA;AAEvC,OAAO,EAAE,IAAI,EAAE,MAAM,aAAa,CAAA;AAClC,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAA;AAGnC,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,MAAM,aAAa,CAAA;AAEvD,MAAM,OAAO,kBAAmB,SAAQ,OAAO;IAI3C,YACI,QAA0B,EAC1B,QAA0B,EAC1B,SAA6B,EAC7B,QAA6B;QAE7B,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,IAAI,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAA;QAExD,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;QACtC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;QAE1C,MAAM,CAAC,KAAK,CACR,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,KAAK,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,EACrD,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,YAAY,EAAE,wCAAwC,CAAC,CAClF,CAAA;IACL,CAAC;IAED,QAAQ;QACJ,OAAO,MAAM,CAAC,MAAM,CAAC;YACjB,KAAK,CAAC,QAAQ,EAAE;YAChB,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE;YACxB,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE;YACzB,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE;SAC3B,CAAC,CAAA;IACN,CAAC;IAED,cAAc;QACV,OAAO;YACH,GAAG,KAAK,CAAC,cAAc,EAAE;YACzB,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE;YAClC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE;SACvC,CAAA;IACL,CAAC;IAED,QAAQ;QACJ,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAA;IACnC,CAAC;CACJ;AAED,MAAM,OAAO,kBAAmB,SAAQ,aAAiC;IACrE,YAAY,KAAa,EAAE,MAAwB,EAAE,KAA2B;QAC5E,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,CAAC,CAAA;QAE1D,MAAM,CAAC,KAAK,CACR,IAAI,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,KAAK,CAAC,MAAM,EAC7D,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,aAAa,EAAE,mCAAmC,CAAC,CAC9E,CAAA;IACL,CAAC;IAED,IAAI,aAAa;QACb,OAAO,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,SAAS,CAAA;IAC7C,CAAC;CACJ\"}","dts":{"name":"/Users/ohayoung/Projects/npm/mitumjs/node_modules/.cache/rollup-plugin-typescript2/placeholder/operation/sto/revoke-operator.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"node\" />\nimport { STOItem } from \"./item\";\nimport { Partition } from \"./partition\";\nimport { OperationFact } from \"../base\";\nimport { Address } from \"../../key\";\nimport { CurrencyID } from \"../../common\";\nimport { HintedObject } from \"../../types\";\nexport declare class RevokeOperatorItem extends STOItem {\n    readonly operator: Address;\n    readonly partition: Partition;\n    constructor(contract: string | Address, operator: string | Address, partition: string | Partition, currency: string | CurrencyID);\n    toBuffer(): Buffer;\n    toHintedObject(): HintedObject;\n    toString(): string;\n}\nexport declare class RevokeOperatorFact extends OperationFact<RevokeOperatorItem> {\n    constructor(token: string, sender: string | Address, items: RevokeOperatorItem[]);\n    get operationHint(): string;\n}\n"}}
