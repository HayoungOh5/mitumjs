{"code":"import { CreateCollectionFact } from \"./create-collection\";\nimport { UpdateCollectionPolicyFact } from \"./update-collection-policy\";\nimport { MintItem, MintFact } from \"./mint\";\nimport { ApproveItem, ApproveFact } from \"./approve\";\nimport { DelegateItem, DelegateFact } from \"./delegate\";\nimport { TransferItem, TransferFact } from \"./transfer\";\nimport { SignItem, SignFact } from \"./sign\";\nimport { Signer, Signers } from \"./signer\";\nimport { ContractGenerator, Operation } from \"../base\";\nimport { contract, getAPIData } from \"../../api\";\nimport { Big, TimeStamp } from \"../../types\";\nimport { Assert, ECODE, MitumError } from \"../../error\";\nexport class NFT extends ContractGenerator {\n    constructor(networkID, api, delegateIP) {\n        super(networkID, api, delegateIP);\n    }\n    createCollection(contractAddr, sender, data, currency) {\n        const keysToCheck = ['name', 'uri', 'royalty', 'whitelist'];\n        keysToCheck.forEach((key) => {\n            Assert.check(data[key] !== undefined, MitumError.detail(ECODE.INVALID_DATA_STRUCTURE, `${key} is undefined, check the collectionData structure`));\n        });\n        return new Operation(this.networkID, new CreateCollectionFact(TimeStamp.new().UTC(), sender, contractAddr, data.name, data.royalty, data.uri, data.whitelist, currency));\n    }\n    setPolicy(contractAddr, sender, data, currency) {\n        const keysToCheck = ['name', 'uri', 'royalty', 'whitelist'];\n        keysToCheck.forEach((key) => {\n            Assert.check(data[key] !== undefined, MitumError.detail(ECODE.INVALID_DATA_STRUCTURE, `${key} is undefined, check the collectionData structure`));\n        });\n        return new Operation(this.networkID, new UpdateCollectionPolicyFact(TimeStamp.new().UTC(), sender, contractAddr, data.name, data.royalty, data.uri, data.whitelist, currency));\n    }\n    mint(contractAddr, sender, receiver, uri, hash, currency, creator) {\n        return new Operation(this.networkID, new MintFact(TimeStamp.new().UTC(), sender, [new MintItem(contractAddr, receiver, hash, uri, new Signers(100, [new Signer(creator, 100, false)]), currency)]));\n    }\n    mintForMultiCreators(contractAddr, sender, receiver, uri, hash, currency, creators) {\n        const keysToCheck = ['account', 'share'];\n        keysToCheck.forEach((key) => {\n            creators.forEach((creator) => {\n                Assert.check(creator[key] !== undefined, MitumError.detail(ECODE.INVALID_DATA_STRUCTURE, `${key} is undefined, check the Creator structure`));\n            });\n        });\n        return new Operation(this.networkID, new MintFact(TimeStamp.new().UTC(), sender, [\n            new MintItem(contractAddr, receiver, hash, uri, new Signers(creators.reduce((prev, next) => prev + Big.from(next.share).v, 0), creators.map(a => new Signer(a.account, a.share, false))), currency)\n        ]));\n    }\n    transfer(contractAddr, sender, receiver, nftID, currency) {\n        const fact = new TransferFact(TimeStamp.new().UTC(), sender, [\n            new TransferItem(contractAddr, receiver, nftID, currency)\n        ]);\n        return new Operation(this.networkID, fact);\n    }\n    approve(contractAddr, owner, operator, nftID, currency) {\n        return new Operation(this.networkID, new ApproveFact(TimeStamp.new().UTC(), owner, [\n            new ApproveItem(contractAddr, operator, nftID, currency)\n        ]));\n    }\n    setApprovalForAll(contractAddr, owner, operator, mode, currency) {\n        return new Operation(this.networkID, new DelegateFact(TimeStamp.new().UTC(), owner, [\n            new DelegateItem(contractAddr, operator, mode, currency)\n        ]));\n    }\n    sign(contractAddr, creator, nftID, currency) {\n        return new Operation(this.networkID, new SignFact(TimeStamp.new().UTC(), creator, [\n            new SignItem(contractAddr, nftID, currency)\n        ]));\n    }\n    async getCollectionInfo(contractAddr) {\n        const data = await getAPIData(() => contract.nft.getCollection(this.api, contractAddr, this.delegateIP));\n        return data ? data._embedded : null;\n    }\n    async ownerOf(contractAddr, nftID) {\n        const data = await getAPIData(() => contract.nft.getNFT(this.api, contractAddr, nftID, this.delegateIP));\n        return data ? data._embedded.owner : null;\n    }\n    async getApproved(contractAddr, nftID) {\n        const data = await getAPIData(() => contract.nft.getNFT(this.api, contractAddr, nftID, this.delegateIP));\n        return data ? data._embedded.approved : null;\n    }\n    async totalSupply(contractAddr) {\n        const data = await getAPIData(() => contract.nft.getNFTs(this.api, contractAddr, this.delegateIP));\n        return data ? data._embedded.length : null;\n    }\n    async tokenURI(contractAddr, nftID) {\n        const data = await getAPIData(() => contract.nft.getNFT(this.api, contractAddr, nftID, this.delegateIP));\n        return data ? data._embedded.uri : null;\n    }\n    async isApprovedForAll(contractAddr, owner) {\n        return await getAPIData(() => contract.nft.getAccountOperators(this.api, contractAddr, owner, this.delegateIP));\n    }\n    async getNFTInfo(contractAddr, nftID) {\n        return await getAPIData(() => contract.nft.getNFT(this.api, contractAddr, nftID, this.delegateIP));\n    }\n    async getNFTs(contractAddr) {\n        return await getAPIData(() => contract.nft.getNFTs(this.api, contractAddr, this.delegateIP));\n    }\n}\n//# sourceMappingURL=index.js.map","references":["/Users/ohayoung/Projects/npm/mitumjs/src/operation/nft/create-collection.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/nft/update-collection-policy.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/nft/mint.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/nft/approve.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/nft/delegate.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/nft/transfer.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/nft/sign.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/nft/signer.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/base/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/key/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/common/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/api/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/types/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/error/index.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/operation/nft/index.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/ohayoung/Projects/npm/mitumjs/node_modules/.cache/rollup-plugin-typescript2/placeholder/operation/nft/index.d.ts","writeByteOrderMark":false,"text":"import { CreateCollectionFact } from \"./create-collection\";\nimport { UpdateCollectionPolicyFact } from \"./update-collection-policy\";\nimport { MintFact } from \"./mint\";\nimport { ApproveFact } from \"./approve\";\nimport { DelegateFact } from \"./delegate\";\nimport { TransferFact } from \"./transfer\";\nimport { SignFact } from \"./sign\";\nimport { ContractGenerator, Operation } from \"../base\";\nimport { Address } from \"../../key\";\nimport { CurrencyID } from \"../../common\";\nimport { Big, IP, LongString } from \"../../types\";\ntype collectionData = {\n    name: string | LongString;\n    uri: string | LongString;\n    royalty: string | number | Big;\n    whitelist: (string | Address)[];\n};\ntype Creator = {\n    account: string | Address;\n    share: string | number | Big;\n};\nexport declare class NFT extends ContractGenerator {\n    constructor(networkID: string, api?: string | IP, delegateIP?: string | IP);\n    createCollection(contractAddr: string | Address, sender: string | Address, data: collectionData, currency: string | CurrencyID): Operation<CreateCollectionFact>;\n    setPolicy(contractAddr: string | Address, sender: string | Address, data: collectionData, currency: string | CurrencyID): Operation<UpdateCollectionPolicyFact>;\n    mint(contractAddr: string | Address, sender: string | Address, receiver: string | Address, uri: string | LongString, hash: string | LongString, currency: string | CurrencyID, creator: string | Address): Operation<MintFact>;\n    mintForMultiCreators(contractAddr: string | Address, sender: string | Address, receiver: string | Address, uri: string | LongString, hash: string | LongString, currency: string | CurrencyID, creators: Creator[]): Operation<MintFact>;\n    transfer(contractAddr: string | Address, sender: string | Address, receiver: string | Address, nftID: string | number | Big, currency: string | CurrencyID): Operation<TransferFact>;\n    approve(contractAddr: string | Address, owner: string | Address, operator: string | Address, nftID: string | number | Big, currency: string | CurrencyID): Operation<ApproveFact>;\n    setApprovalForAll(contractAddr: string | Address, owner: string | Address, operator: string | Address, mode: \"allow\" | \"cancel\", currency: string | CurrencyID): Operation<DelegateFact>;\n    sign(contractAddr: string | Address, creator: string | Address, nftID: string | number | Big, currency: string | CurrencyID): Operation<SignFact>;\n    getCollectionInfo(contractAddr: string | Address): Promise<any>;\n    ownerOf(contractAddr: string | Address, nftID: string | number | Big): Promise<any>;\n    getApproved(contractAddr: string | Address, nftID: number): Promise<any>;\n    totalSupply(contractAddr: string | Address): Promise<any>;\n    tokenURI(contractAddr: string | Address, nftID: number): Promise<any>;\n    isApprovedForAll(contractAddr: string | Address, owner: string): Promise<any>;\n    getNFTInfo(contractAddr: string | Address, nftID: number): Promise<any>;\n    getNFTs(contractAddr: string | Address): Promise<any>;\n}\nexport {};\n"}}
