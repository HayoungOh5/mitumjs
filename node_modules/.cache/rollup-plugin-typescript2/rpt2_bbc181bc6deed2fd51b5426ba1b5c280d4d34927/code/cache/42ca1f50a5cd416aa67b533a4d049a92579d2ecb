{"code":"import { Generator } from \"./types\";\nimport { Block, Node, NetworkID } from \"./node\";\nimport { Account, Currency, Contract, NFT, DAO, KYC, STO, TimeStamp, Credential, Token, Point, Operation, Signer, } from \"./operation\";\nexport class Mitum extends Generator {\n    constructor(api, delegateIP) {\n        super(NetworkID.get(), api, delegateIP);\n        this._node = new Node(this.api, this.delegateIP);\n        this._account = new Account(this.networkID, this.api, this.delegateIP);\n        this._currency = new Currency(this.networkID, this.api, this.delegateIP);\n        this._block = new Block(this.api, this.delegateIP);\n        this._operation = new Operation(this.networkID, this.api, this.delegateIP);\n        this._signer = new Signer(this.networkID, this.api);\n        this._contract = new Contract(this.networkID, this.api, this.delegateIP);\n        this._nft = new NFT(this.networkID, this.api, this.delegateIP);\n        this._credential = new Credential(this.networkID, this.api, this.delegateIP);\n        this._timestamp = new TimeStamp(this.networkID, this.api, this.delegateIP);\n        this._sto = new STO(this.networkID, this.api, this.delegateIP);\n        this._kyc = new KYC(this.networkID, this.api, this.delegateIP);\n        this._dao = new DAO(this.networkID, this.api, this.delegateIP);\n        this._token = new Token(this.networkID, this.api, this.delegateIP);\n        this._point = new Point(this.networkID, this.api, this.delegateIP);\n    }\n    refresh() {\n        this._node = new Node(this.api, this.delegateIP);\n        this._account = new Account(this.networkID, this.api, this.delegateIP);\n        this._currency = new Currency(this.networkID, this.api, this.delegateIP);\n        this._block = new Block(this.api, this.delegateIP);\n        this._operation = new Operation(this.networkID, this.api, this.delegateIP);\n        this._contract = new Contract(this.networkID, this.api, this.delegateIP);\n        this._nft = new NFT(this.networkID, this.api, this.delegateIP);\n        this._credential = new Credential(this.networkID, this.api, this.delegateIP);\n        this._timestamp = new TimeStamp(this.networkID, this.api, this.delegateIP);\n        this._sto = new STO(this.networkID, this.api, this.delegateIP);\n        this._kyc = new KYC(this.networkID, this.api, this.delegateIP);\n        this._dao = new DAO(this.networkID, this.api, this.delegateIP);\n        this._token = new Token(this.networkID, this.api, this.delegateIP);\n        this._point = new Point(this.networkID, this.api, this.delegateIP);\n    }\n    get node() {\n        return this._node;\n    }\n    get account() {\n        return this._account;\n    }\n    get currency() {\n        return this._currency;\n    }\n    get block() {\n        return this._block;\n    }\n    get operation() {\n        return this._operation;\n    }\n    get signer() {\n        return this._signer;\n    }\n    get contract() {\n        return this._contract;\n    }\n    get nft() {\n        return this._nft;\n    }\n    get credential() {\n        return this._credential;\n    }\n    get timestamp() {\n        return this._timestamp;\n    }\n    get sto() {\n        return this._sto;\n    }\n    get kyc() {\n        return this._kyc;\n    }\n    get dao() {\n        return this._dao;\n    }\n    get token() {\n        return this._token;\n    }\n    get point() {\n        return this._point;\n    }\n    setAPI(api) {\n        super.setAPI(api);\n        this.refresh();\n    }\n    setDelegate(delegateIP) {\n        super.setDelegate(delegateIP);\n        this.refresh();\n    }\n    setNetworkID(networkID) {\n        super.setNetworkID(networkID);\n        this.refresh();\n    }\n    getAPI() {\n        return this.api.toString();\n    }\n    getDelegate() {\n        return this.delegateIP.toString();\n    }\n    getNetworkID() {\n        return this.networkID;\n    }\n}\nexport default Mitum;\n//# sourceMappingURL=index.js.map","references":["/Users/ohayoung/Projects/npm/mitumjs/src/types/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/node/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/operation/index.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/index.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/ohayoung/Projects/npm/mitumjs/node_modules/.cache/rollup-plugin-typescript2/placeholder/index.d.ts","writeByteOrderMark":false,"text":"import { Generator, IP } from \"./types\";\nimport { Block, Node } from \"./node\";\nimport { Account, Currency, Contract, NFT, DAO, KYC, STO, TimeStamp, Credential, Token, Point, Operation, Signer } from \"./operation\";\nexport declare class Mitum extends Generator {\n    private _node;\n    private _account;\n    private _currency;\n    private _contract;\n    private _block;\n    private _operation;\n    private _signer;\n    private _nft;\n    private _credential;\n    private _timestamp;\n    private _sto;\n    private _kyc;\n    private _dao;\n    private _token;\n    private _point;\n    constructor(api?: string, delegateIP?: string);\n    private refresh;\n    get node(): Node;\n    get account(): Account;\n    get currency(): Currency;\n    get block(): Block;\n    get operation(): Operation;\n    get signer(): Signer;\n    get contract(): Contract;\n    get nft(): NFT;\n    get credential(): Credential;\n    get timestamp(): TimeStamp;\n    get sto(): STO;\n    get kyc(): KYC;\n    get dao(): DAO;\n    get token(): Token;\n    get point(): Point;\n    setAPI(api: string | IP): void;\n    setDelegate(delegateIP: string | IP): void;\n    setNetworkID(networkID: string): void;\n    getAPI(): string;\n    getDelegate(): string;\n    getNetworkID(): string;\n}\nexport default Mitum;\n"}}
