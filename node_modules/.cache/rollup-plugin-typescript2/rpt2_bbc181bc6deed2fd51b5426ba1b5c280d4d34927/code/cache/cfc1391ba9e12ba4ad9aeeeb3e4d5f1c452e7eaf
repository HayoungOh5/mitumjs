{"code":"import { Fact } from \"../base\";\nimport { HINT } from \"../../alias\";\nimport { Address } from \"../../key\";\nimport { SortFunc } from \"../../utils\";\nimport { CurrencyID } from \"../../common\";\nexport class UpdateOperatorFact extends Fact {\n    constructor(token, sender, contract, currency, operators) {\n        super(HINT.CURRENCY.UPDATE_OPERATOR.FACT, token);\n        this.sender = Address.from(sender);\n        this.contract = Address.from(contract);\n        this.currency = CurrencyID.from(currency);\n        this.operators = operators.map(a => Address.from(a));\n        this._hash = this.hashing();\n    }\n    toBuffer() {\n        return Buffer.concat([\n            super.toBuffer(),\n            this.sender.toBuffer(),\n            this.contract.toBuffer(),\n            this.currency.toBuffer(),\n            Buffer.concat(this.operators.sort(SortFunc).map(a => a.toBuffer())),\n        ]);\n    }\n    toHintedObject() {\n        return {\n            ...super.toHintedObject(),\n            sender: this.sender.toString(),\n            contract: this.contract.toString(),\n            currency: this.currency.toString(),\n            operators: this.operators.sort(SortFunc).map((w) => w.toString()),\n        };\n    }\n    get operationHint() {\n        return HINT.CURRENCY.UPDATE_OPERATOR.OPERATION;\n    }\n}\n//# sourceMappingURL=update-operator.js.map","references":["/Users/ohayoung/Projects/npm/mitumjs/src/operation/base/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/alias/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/key/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/utils/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/common/index.ts"],"map":"{\"version\":3,\"file\":\"update-operator.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/operation/currency/update-operator.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,IAAI,EAAY,MAAM,SAAS,CAAA;AAExC,OAAO,EAAE,IAAI,EAAE,MAAM,aAAa,CAAA;AAClC,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAA;AACnC,OAAO,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAA;AACtC,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAA;AAEzC,MAAM,OAAO,kBAAmB,SAAQ,IAAI;IAMxC,YACI,KAAa,EACb,MAAwB,EACxB,QAA0B,EAC1B,QAA6B,EAC7B,SAA+B;QAE/B,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,EAAE,KAAK,CAAC,CAAA;QAChD,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QAClC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;QACtC,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;QACzC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;QACpD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,EAAE,CAAA;IAC/B,CAAC;IAED,QAAQ;QACJ,OAAO,MAAM,CAAC,MAAM,CAAC;YACjB,KAAK,CAAC,QAAQ,EAAE;YAChB,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;YACtB,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE;YACxB,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE;YACxB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;SACtE,CAAC,CAAA;IACN,CAAC;IAED,cAAc;QACV,OAAO;YACH,GAAG,KAAK,CAAC,cAAc,EAAE;YACzB,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;YAC9B,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE;YAClC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE;YAClC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;SACpE,CAAA;IACL,CAAC;IAED,IAAI,aAAa;QACb,OAAO,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,SAAS,CAAA;IAClD,CAAC;CACJ\"}","dts":{"name":"/Users/ohayoung/Projects/npm/mitumjs/node_modules/.cache/rollup-plugin-typescript2/placeholder/operation/currency/update-operator.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"node\" />\nimport { Fact, FactJson } from \"../base\";\nimport { Address } from \"../../key\";\nimport { CurrencyID } from \"../../common\";\nexport declare class UpdateOperatorFact extends Fact {\n    readonly sender: Address;\n    readonly contract: Address;\n    readonly operators: Address[];\n    readonly currency: CurrencyID;\n    constructor(token: string, sender: string | Address, contract: string | Address, currency: string | CurrencyID, operators: (string | Address)[]);\n    toBuffer(): Buffer;\n    toHintedObject(): FactJson;\n    get operationHint(): string;\n}\n"}}
