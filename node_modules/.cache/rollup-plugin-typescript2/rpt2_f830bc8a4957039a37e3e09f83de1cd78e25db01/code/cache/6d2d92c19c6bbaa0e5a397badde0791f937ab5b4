{"code":"import { Config } from \"../../node\";\nimport { Assert, ECODE, MitumError } from \"../../error\";\nexport class Partition {\n    constructor(s) {\n        Assert.check(Config.STO.PARTITION.satisfy(s.length), MitumError.detail(ECODE.STO.INVALID_PARTITION, \"partition length out of range\"));\n        Assert.check(/^[A-Z0-9][A-Z0-9_\\.\\!\\$\\*\\@]*[A-Z0-9]$/.test(s), MitumError.detail(ECODE.STO.INVALID_PARTITION, \"invalid partition format\"));\n        this.s = s;\n    }\n    static from(s) {\n        return s instanceof Partition ? s : new Partition(s);\n    }\n    toBuffer() {\n        return Buffer.from(this.s);\n    }\n    toString() {\n        return this.s;\n    }\n}\n//# sourceMappingURL=partition.js.map","references":["/Users/ohayoung/Projects/npm/mitumjs/src/node/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/types/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/error/index.ts"],"map":"{\"version\":3,\"file\":\"partition.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/operation/sto/partition.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,YAAY,CAAA;AAEnC,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,MAAM,aAAa,CAAA;AAEvD,MAAM,OAAO,SAAS;IAGlB,YAAY,CAAS;QACjB,MAAM,CAAC,KAAK,CACR,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,EACtC,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,iBAAiB,EAAE,+BAA+B,CAAC,CAClF,CAAA;QACD,MAAM,CAAC,KAAK,CACR,wCAAwC,CAAC,IAAI,CAAC,CAAC,CAAC,EAChD,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,iBAAiB,EAAE,0BAA0B,CAAC,CAC7E,CAAA;QACD,IAAI,CAAC,CAAC,GAAG,CAAC,CAAA;IACd,CAAC;IAED,MAAM,CAAC,IAAI,CAAC,CAAqB;QAC7B,OAAO,CAAC,YAAY,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,CAAC,CAAA;IACxD,CAAC;IAED,QAAQ;QACJ,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;IAC9B,CAAC;IAED,QAAQ;QACJ,OAAO,IAAI,CAAC,CAAC,CAAA;IACjB,CAAC;CACJ\"}","dts":{"name":"/Users/ohayoung/Projects/npm/mitumjs/node_modules/.cache/rollup-plugin-typescript2/placeholder/operation/sto/partition.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"node\" />\nimport { IBuffer, IString } from \"../../types\";\nexport declare class Partition implements IBuffer, IString {\n    private s;\n    constructor(s: string);\n    static from(s: string | Partition): Partition;\n    toBuffer(): Buffer;\n    toString(): string;\n}\n"}}
