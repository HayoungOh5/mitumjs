{"code":"import { randomN } from \"./random\";\nimport { Keys, Key, PubKey, EtherKeys } from \"./pub\";\nimport { BaseKeyPair, KeyPair } from \"./keypair\";\nimport { Address, ZeroAddress, NodeAddress } from \"./address\";\nimport { Generator } from \"../types\";\nimport { Assert, ECODE, MitumError } from \"../error\";\nexport { Address, ZeroAddress, NodeAddress, Key, Keys, PubKey, EtherKeys, BaseKeyPair, KeyPair, randomN, };\nexport class KeyG extends Generator {\n    constructor(networkID, api, delegateIP) {\n        super(networkID, api, delegateIP);\n    }\n    key(seed) {\n        if (!seed) {\n            const kp = KeyPair.random();\n            return {\n                privatekey: kp.privateKey.toString(),\n                publickey: kp.publicKey.toString(),\n                address: this.address(kp.publicKey.toString()),\n            };\n        }\n        const kp = KeyPair.fromSeed(seed);\n        return {\n            privatekey: kp.privateKey.toString(),\n            publickey: kp.publicKey.toString(),\n            address: this.address(kp.publicKey.toString()),\n        };\n    }\n    keys(n) {\n        return randomN(n).keypairs.map((kp) => {\n            return {\n                privatekey: kp.privateKey.toString(),\n                publickey: kp.publicKey.toString(),\n                address: this.address(kp.publicKey.toString()),\n            };\n        });\n    }\n    fromPrivateKey(key) {\n        const kp = KeyPair.fromPrivateKey(key);\n        if (kp.privateKey.type == \"btc\") {\n            return {\n                privatekey: kp.privateKey.toString(),\n                publickey: kp.publicKey.toString(),\n                address: this.address(kp.publicKey),\n            };\n        }\n        return {\n            privatekey: kp.privateKey.toString(),\n            publickey: kp.publicKey.toString(),\n            address: this.etherAddress(kp.publicKey),\n        };\n    }\n    etherKey(seed) {\n        if (!seed) {\n            const kp = KeyPair.random(\"ether\");\n            return {\n                privatekey: kp.privateKey.toString(),\n                publickey: kp.publicKey.toString(),\n                address: this.etherAddress(kp.publicKey),\n            };\n        }\n        const kp = KeyPair.fromSeed(seed, \"ether\");\n        return {\n            privatekey: kp.privateKey.toString(),\n            publickey: kp.publicKey.toString(),\n            address: this.etherAddress(kp.publicKey),\n        };\n    }\n    etherKeys(n) {\n        return randomN(n, \"ether\").keypairs.map(kp => {\n            return {\n                privatekey: kp.privateKey.toString(),\n                publickey: kp.publicKey.toString(),\n                address: this.etherAddress(kp.publicKey),\n            };\n        });\n    }\n    address(key) {\n        const suffix = key.toString().slice(-3);\n        Assert.check(suffix === \"mpu\", MitumError.detail(ECODE.INVALID_PUBLIC_KEY, \"invalid pubkey format\"));\n        return new Keys([new PubKey(key, 100)], 100).address.toString();\n    }\n    etherAddress(key) {\n        const suffix = key.toString().slice(-3);\n        Assert.check(suffix === \"epu\", MitumError.detail(ECODE.INVALID_PUBLIC_KEY, \"invalid pubkey format\"));\n        return new EtherKeys([new PubKey(key, 100)], 100).etherAddress.toString();\n    }\n    addressForMultiSig(keys, threshold) {\n        return new Keys(keys.map(k => k instanceof PubKey ? k : new PubKey(k.key, k.weight)), threshold).address.toString();\n    }\n    etherAddressForMultiSig(keys, threshold) {\n        return new EtherKeys(keys.map(k => k instanceof PubKey ? k : new PubKey(k.key, k.weight)), threshold).etherAddress.toString();\n    }\n}\n//# sourceMappingURL=index.js.map","references":["/Users/ohayoung/Projects/npm/mitumjs/src/key/types.ts","/Users/ohayoung/Projects/npm/mitumjs/src/key/random.ts","/Users/ohayoung/Projects/npm/mitumjs/src/key/pub.ts","/Users/ohayoung/Projects/npm/mitumjs/src/key/keypair.ts","/Users/ohayoung/Projects/npm/mitumjs/src/key/address.ts","/Users/ohayoung/Projects/npm/mitumjs/src/types/index.ts","/Users/ohayoung/Projects/npm/mitumjs/src/error/index.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/key/index.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/ohayoung/Projects/npm/mitumjs/node_modules/.cache/rollup-plugin-typescript2/placeholder/key/index.d.ts","writeByteOrderMark":false,"text":"import { KeyPairType, AddressType, Account } from \"./types\";\nimport { randomN } from \"./random\";\nimport { Keys, Key, PubKey, EtherKeys } from \"./pub\";\nimport { BaseKeyPair, KeyPair } from \"./keypair\";\nimport { Address, ZeroAddress, NodeAddress } from \"./address\";\nimport { Big, Generator, IP } from \"../types\";\nexport { KeyPairType, AddressType, Account, Address, ZeroAddress, NodeAddress, Key, Keys, PubKey, EtherKeys, BaseKeyPair, KeyPair, randomN, };\ntype keysType = ({\n    key: string | Key | PubKey;\n    weight: string | number | Big;\n} | PubKey)[] | Array<{\n    key: string | Key | PubKey;\n    weight: string | number | Big;\n}>;\nexport declare class KeyG extends Generator {\n    constructor(networkID: string, api?: string | IP, delegateIP?: string | IP);\n    key(seed?: string): Account;\n    keys(n: number): Array<Account>;\n    fromPrivateKey(key: string | Key): Account;\n    etherKey(seed?: string): Account;\n    etherKeys(n: number): Array<Account>;\n    address(key: string | Key): string;\n    etherAddress(key: string | Key): string;\n    addressForMultiSig(keys: keysType, threshold: string | number | Big): string;\n    etherAddressForMultiSig(keys: keysType, threshold: string | number | Big): string;\n}\n"}}
