{"code":"import { ECODE } from \"./code\";\nexport class MitumError extends Error {\n    constructor(code, msg) {\n        super(msg);\n        this.code = code;\n    }\n    static new() {\n        return new MitumError(ECODE.UNKNOWN);\n    }\n    static detail(code, msg) {\n        return new MitumError(code ?? ECODE.UNKNOWN, msg);\n    }\n}\nexport class Assert {\n    constructor(condition, error) {\n        this.condition = condition;\n        this.error = error;\n    }\n    static get(condition, error) {\n        return new Assert(condition, error ?? MitumError.new());\n    }\n    static check(condition, error) {\n        Assert.get(condition, error).excute();\n    }\n    not() {\n        this.condition = !this.condition;\n        return this;\n    }\n    true() {\n        return this;\n    }\n    false() {\n        return this.not();\n    }\n    excute() {\n        if (!this.condition) {\n            throw this.error;\n        }\n    }\n}\nexport class StringAssert {\n    constructor(s, error) {\n        this.s = s;\n        this.error = error;\n        this.condition = undefined;\n    }\n    static with(s, error) {\n        return new StringAssert(s, error ?? MitumError.new());\n    }\n    union(condition) {\n        if (this.condition !== undefined) {\n            this.condition = this.condition && condition;\n        }\n        else {\n            this.condition = condition;\n        }\n    }\n    not() {\n        if (this.condition !== undefined) {\n            this.condition = !this.condition;\n        }\n        return this;\n    }\n    empty() {\n        this.union(this.s === \"\");\n        return this;\n    }\n    equal(s) {\n        this.union(this.s === s);\n        return this;\n    }\n    startsWith(...pre) {\n        this.union(pre.reduce((prev, curr) => prev || this.s.startsWith(curr), false));\n        return this;\n    }\n    endsWith(...suf) {\n        this.union(suf.reduce((prev, curr) => prev || this.s.endsWith(curr), false));\n        return this;\n    }\n    satisfyConfig(config) {\n        this.union(config.satisfy(this.s.length));\n        return this;\n    }\n    chainAnd(...conditions) {\n        this.union(conditions.reduce((prev, curr) => prev && curr, true));\n        return this;\n    }\n    chainOr(...conditions) {\n        this.union(conditions.reduce((prev, curr) => prev || curr, false));\n        return this;\n    }\n    excute() {\n        if (!this.condition) {\n            throw this.error;\n        }\n    }\n}\n//# sourceMappingURL=assert.js.map","references":["/Users/ohayoung/Projects/npm/mitumjs/src/error/code.ts","/Users/ohayoung/Projects/npm/mitumjs/src/node/index.ts"],"map":"{\"version\":3,\"file\":\"assert.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/error/assert.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/ohayoung/Projects/npm/mitumjs/node_modules/.cache/rollup-plugin-typescript2/placeholder/error/assert.d.ts","writeByteOrderMark":false,"text":"import { ErrorCode } from \"./code\";\nimport { RangeConfig } from \"../node\";\nexport declare class MitumError extends Error {\n    readonly code: ErrorCode;\n    private constructor();\n    static new(): MitumError;\n    static detail(code?: ErrorCode, msg?: string): MitumError;\n}\nexport declare class Assert {\n    private condition;\n    private error;\n    private constructor();\n    static get(condition: boolean, error?: MitumError): Assert;\n    static check(condition: boolean, error?: MitumError): void;\n    not(): this;\n    true(): this;\n    false(): this;\n    excute(): void;\n}\nexport declare class StringAssert {\n    private readonly s;\n    private condition;\n    private error;\n    private constructor();\n    static with(s: string, error?: MitumError): StringAssert;\n    private union;\n    not(): this;\n    empty(): this;\n    equal(s: string): this;\n    startsWith(...pre: string[]): this;\n    endsWith(...suf: string[]): this;\n    satisfyConfig(config: RangeConfig): this;\n    chainAnd(...conditions: boolean[]): this;\n    chainOr(...conditions: boolean[]): this;\n    excute(): void;\n}\n"}}
